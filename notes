Amazon EC2 (Elastic Compute Cloud)
📖 What it is:
Virtual servers in the cloud (IaaS).
Flexible in CPU, memory, storage, and networking.

✅ Key Features
Instance Types – General Purpose, Compute Optimized, Memory Optimized, Storage Optimized, Accelerated Computing.
User Data – Bootstrap script that runs once at launch.
Security Groups – Virtual firewalls for EC2 (stateful).
Elastic IPs – Static public IPv4 address (not recommended, better use DNS/ELB).
Placement Groups – Control how EC2 instances are placed (Cluster, Spread, Partition).
Purchasing Options:
On-Demand – Pay per use.
Reserved Instances / Savings Plans – Long-term commitment (1–3 years) with discounts.
Spot Instances – 90% cheaper, can be interrupted.
Dedicated Hosts – Whole server, for compliance/licensing.
Capacity Reservations – Reserve capacity in a specific AZ.

🛠 Use Cases
Web servers, application servers.
High-performance computing.
Gaming, machine learning, big data workloads.
Temporary workloads (Spot).
Database hosting (Reserved).

📌 Exam Tips
Default behavior: Public IPv4 changes on stop/start → use Elastic IP if you need static.
Security groups are stateful (if inbound is allowed, outbound automatically allowed).
On-demand vs Spot vs Reserved – expect exam scenario questions.
Placement Groups:
Cluster = low latency, high throughput.
Spread = HA (max 7 instances per AZ).
Partition = Hadoop, Cassandra, Kafka.
EC2 Hibernate preserves RAM (useful for long-running apps).
IPv4 now charged separately (as of 2024) except free tier.



🔹 Amazon ECR (Elastic Container Registry)
📖 What it is:
Fully managed container image registry.
Stores, manages, and deploys Docker & OCI images.
Works seamlessly with ECS, EKS, and Fargate.
✅ Key Features
Private & Public Repositories – host images securely or share publicly.
IAM Integration – permissions controlled via IAM.
Vulnerability Scanning – detects security issues in images.
Lifecycle Policies – automatically remove old/unused images.
Encryption – images encrypted at rest (KMS).
Integration – push/pull directly from Docker CLI or CI/CD pipelines.
Cross-region Replication – replicate images globally for low-latency.
🛠 Use Cases
Central repository for container images in AWS.
Securely store application images for deployment on ECS/EKS.
Automate CI/CD workflows (build in CodeBuild → store in ECR → deploy in ECS/EKS).
Maintain compliance with vulnerability scanning.
📌 Exam Tips
ECR stores images, ECS/EKS run them.
By default, private repository (only accessible with IAM policies).
Lifecycle policies help reduce cost by cleaning old images.
Can integrate with CodePipeline for CI/CD deployments.
Authentication is done using aws ecr get-login-password.
Public ECR works like DockerHub but is AWS-managed.
🌍 Real-World Example
Imagine you are building a microservices-based e-commerce app.
Your CI/CD pipeline (CodePipeline + CodeBuild) builds Docker images for each microservice.
These images are pushed to ECR.
Then ECS/EKS pulls them to run in production.
 This ensures your app always runs the latest, tested version.
🔹 Amazon ECS (Elastic Container Service)
📖 What it is:
A fully managed container orchestration service by AWS.
Lets you run and scale Docker containers without needing to install/manage Kubernetes yourself.
Can run containers on EC2 instances or Fargate (serverless compute for containers).
✅ Key Features
Launch Types:
EC2 Launch Type → You manage the cluster of EC2 instances where containers run.
Fargate Launch Type → AWS runs containers for you (no servers to manage).
Tasks & Services:
Task = A running containerized application (defined by a task definition).
Service = Ensures tasks are running and can auto-scale them.
Task Definitions – JSON file describing how to run containers (image, CPU, memory, ports, environment variables).
Integration: Works with ECR, CloudWatch, ALB/NLB, IAM roles.
Auto Scaling: Automatically scale containers up/down based on demand.
Networking: Uses VPC, ENIs, and Security Groups to isolate containers.
Logging: Integrated with CloudWatch Logs.
🛠 Use Cases
Run microservices architectures.
Deploy event-driven applications.
Batch processing workloads in containers.
Run containerized legacy apps on AWS without needing full Kubernetes.
📌 Exam Tips
ECS vs EKS:
ECS = AWS-native container orchestration.
EKS = Managed Kubernetes (industry-standard).
Fargate vs EC2 in ECS:
Fargate = Serverless, pay per container runtime.
EC2 = You manage underlying servers.
Task Roles – Assign IAM roles at task level (principle of least privilege).
Load Balancing – Use Application Load Balancer (ALB) to route traffic to ECS tasks.
ECS + ECR often appear together (ECR for storing images, ECS for running them).
🌍 Real-World Example
Suppose you are building a ride-sharing app with multiple microservices:
User Service, Booking Service, Payment Service – each packaged as a Docker container.
You store the images in ECR.
With ECS Fargate, you deploy all services without worrying about servers.
An Application Load Balancer routes traffic (e.g., /payments → Payment Service).
ECS scales up containers automatically when demand increases (e.g., rush hours).
🔹 Amazon EKS (Elastic Kubernetes Service)
📖 What it is:
A managed Kubernetes service on AWS.
Lets you run Kubernetes (K8s) clusters without managing the control plane.
Compatible with standard Kubernetes, so you can migrate workloads easily.
✅ Key Features
Managed Control Plane – AWS manages Kubernetes masters, etcd, and API servers.
Worker Nodes – Can run on EC2 or Fargate.
EKS Anywhere – Deploy Kubernetes clusters on-premises (VMware, bare metal).
EKS Blueprints – Prebuilt architectures for faster setup.
Integrations: Works with IAM (for RBAC), CloudWatch, ALB Ingress Controller, App Mesh.
Networking – Uses VPC CNI Plugin for Kubernetes pods to get native VPC networking (each pod gets its own IP).
Scalability – Supports auto-scaling of worker nodes & pods.
🛠 Use Cases
Run cloud-native microservices using Kubernetes.
Hybrid cloud workloads (same K8s setup on AWS + on-prem).
Migration from self-managed Kubernetes clusters to AWS.
ML workloads orchestrated with Kubernetes frameworks (Kubeflow).
📌 Exam Tips
ECS vs EKS:
ECS → AWS-native, simpler, less overhead.
EKS → Standard Kubernetes, portable across clouds & on-prem.
Worker nodes: Managed via EC2 or Fargate.
IAM + RBAC: EKS integrates IAM users/roles with Kubernetes RBAC.
Pod Networking: VPC CNI → each pod gets an IP in your VPC.
Ingress: ALB Ingress Controller used to expose Kubernetes services externally.
Storage: Pods can use EBS, EFS, or FSx as persistent volumes.
🌍 Real-World Example
Imagine a fintech startup running workloads both on-prem and cloud:
They use EKS Anywhere to run Kubernetes clusters in their on-prem datacenter.
As traffic grows, they migrate workloads to AWS EKS on EC2 for scalability.
Their microservices (payments, fraud detection, analytics) run on Kubernetes.
An ALB Ingress Controller routes traffic from users to pods.
Developers use the same Kubernetes tooling (kubectl, Helm) on both on-prem and AWS.
🔹 AWS Lambda
📖 What it is:
A serverless compute service.
Run code without managing servers.
Pay only for execution time (per request + execution duration).
✅ Key Features
Event-driven – Triggered by events (S3 upload, DynamoDB stream, API Gateway call, CloudWatch event, etc.).
Languages supported – Node.js, Python, Java, Go, .NET, Ruby, and custom runtimes via container images.
Scaling – Auto-scales from 0 to thousands of requests per second.
Timeout – Max execution time = 15 minutes.
Memory/CPU – Configure memory (128 MB → 10 GB), CPU scales with memory.
Ephemeral storage – 512 MB /tmp space by default (configurable up to 10 GB).
Concurrency – Reserved Concurrency (limit executions), Provisioned Concurrency (reduce cold starts).
Networking – Can run inside VPC to access private resources.
🛠 Use Cases
Process files uploaded to S3 (e.g., resize images, generate thumbnails).
Run serverless APIs with API Gateway + Lambda.
Real-time stream processing (Kinesis, DynamoDB Streams).
Automate admin tasks (CloudWatch event triggers).
Backend for mobile/web apps.
📌 Exam Tips
Pricing: Pay per request + duration (rounded to nearest ms).
Cold Starts: First invocation is slower (provisioned concurrency fixes this).
Timeout: Max 15 minutes.
Lambda@Edge: Run Lambda at CloudFront edge locations for low-latency processing.
Integrations: Very important – Lambda integrates tightly with S3, DynamoDB, API Gateway, CloudWatch, SNS, SQS.
IAM Role: Each Lambda function gets an execution role to access AWS resources.
Deployment Package: Can use .zip or container image (up to 10 GB).
🌍 Real-World Example
A news media company allows users to upload profile photos.
When a photo is uploaded to S3, it triggers a Lambda function.
Lambda automatically resizes the image into multiple formats (thumbnail, medium, large).
The processed images are stored back in S3 and served via CloudFront.
 👉 No servers needed, scales automatically, and costs only when images are uploaded.
🔹 Amazon Lightsail
📖 What it is:
A simplified VPS (Virtual Private Server) service by AWS.
Provides an easy way to launch and manage small applications, websites, or databases.
Designed for developers who want simplicity over flexibility.
✅ Key Features
Preconfigured VPS – Choose from Linux/Windows instances with apps like WordPress, Joomla, LAMP stack.
Predictable Pricing – Fixed monthly pricing (bundled compute, storage, bandwidth).
Networking – Includes static IPs, DNS management, and load balancing.
Databases – Managed MySQL/PostgreSQL databases available.
Scaling – Not as scalable as EC2, but you can transition workloads from Lightsail → EC2/VPC if needed.
Integration – Can connect with other AWS services (like S3, CloudFront, Route 53).
Snapshots – Easy backup and restore of servers and databases.
🛠 Use Cases
Hosting simple websites or blogs.
Running small business applications.
Quick prototypes or development environments.
Learning AWS basics without heavy complexity.
📌 Exam Tips
Lightsail = Simpler alternative to EC2 (limited flexibility).
Best choice when exam question asks for “easy setup, predictable cost, no deep AWS knowledge required.”
Comes with bundled networking & DNS (so you don’t need to configure VPC, security groups manually).
Can migrate to EC2 for advanced scaling.
Has blueprint images (WordPress, Node.js, etc.) for one-click app deployment.
🌍 Real-World Example
A freelance developer wants to set up a personal portfolio website quickly.
Instead of configuring EC2, VPC, and security groups, they launch a WordPress instance on Lightsail.
The website is live within minutes, with a fixed monthly bill (e.g., $5/month).
Later, if traffic grows, they can migrate it to EC2 for scalability.
🔹 AWS Elastic Beanstalk
📖 What it is:
A Platform as a Service (PaaS) on AWS.
Lets you deploy, manage, and scale applications without worrying about infrastructure.
Supports multiple programming languages and frameworks.
✅ Key Features
Supported Platforms: Java, .NET, Node.js, PHP, Python, Ruby, Go, Docker.
Full Stack Management: Handles provisioning of EC2, ELB, Auto Scaling, RDS, S3, CloudWatch.
Deployment Options: All-at-once, Rolling, Rolling with additional batch, Immutable.
Environment Types:
Web Server Environment (for web apps, with ELB).
Worker Environment (for background jobs, with SQS).
Customization:
Configuration files (.ebextensions) for advanced setup.
You still have access to the underlying AWS resources.
Monitoring: Integrated with CloudWatch and X-Ray.
🛠 Use Cases
Deploying web applications quickly without managing infrastructure.
Hosting REST APIs or backend services.
Running background worker processes.
Prototyping applications with minimal DevOps overhead.
📌 Exam Tips
Beanstalk vs Lambda:
Beanstalk → Long-running apps, more control, uses EC2.
Lambda → Event-driven, serverless, short execution (≤15 mins).
Beanstalk vs Lightsail:
Lightsail → Simplest option, basic VPS.
Beanstalk → Automated scaling & deployment for developers.
RDS with Beanstalk:
RDS can be created inside Beanstalk, but best practice = create RDS separately (to avoid data loss if Beanstalk is deleted).
Beanstalk environments are free, but underlying resources (EC2, RDS, etc.) are billed.
Deployment Strategies:
All-at-once → Fast, but downtime.
Rolling → Gradual, some capacity reduced.
Immutable → Safest, creates new instances before switching traffic.
🌍 Real-World Example
A startup building a food delivery app wants to deploy a Node.js API backend.
Developers push code to Beanstalk.
Beanstalk automatically launches EC2 instances, configures load balancing, scaling, and monitoring.
They don’t manage servers directly, just code.
As orders increase, Beanstalk auto-scales EC2 instances to handle traffic.
🔹 AWS Batch
📖 What it is:
A fully managed batch processing service.
Runs hundreds to thousands of batch computing jobs efficiently on AWS.
Dynamically provisions the right compute (EC2 or Spot) based on job needs.
✅ Key Features
Job Queues – Submit jobs to a queue, AWS Batch schedules them.
Job Definitions – Define how a job should run (Docker image, vCPUs, memory, IAM role).
Compute Environments –
Managed: AWS provisions EC2/Spot instances for you.
Unmanaged: You provide your own compute resources.
Priority Scheduling – Multiple queues with priority levels.
Container-based – Each batch job runs as a container (ECS under the hood).
Integration – Works with CloudWatch (monitoring), IAM, and Spot Instances (to reduce cost).
Scaling – Scales compute up/down depending on the workload automatically.
🛠 Use Cases
Genomic sequencing (life sciences).
Financial simulations & risk modeling.
Media rendering (video encoding, 3D rendering).
Machine learning model training.
Large-scale data processing pipelines.
📌 Exam Tips
AWS Batch = for batch jobs (don’t confuse with Lambda which is event-driven).
Runs containers on ECS or Fargate, you don’t manage servers.
Spot Instances commonly used with Batch for cost savings.
Job lifecycle = Submit job → Scheduled → Run on compute → Complete.
Good choice in exams when scenario says:
“Run compute-intensive workloads at scale.”
“Jobs can be scheduled and run as resources become available.”
Unlike Lambda, Batch is designed for long-running workloads (not limited to 15 min).
🌍 Real-World Example
A movie studio needs to render thousands of animation frames for a new film.
They submit render jobs to AWS Batch.
AWS Batch provisions a fleet of Spot EC2 instances automatically.
Each job (frame) runs as a containerized workload.
Once rendering is done, the compute resources scale down.
 👉 The studio saves costs and avoids managing large rendering clusters.
🔹 Amazon S3 (Simple Storage Service)
📖 What it is:
Object storage service for any type of data.
Highly durable (11 9’s), scalable, and secure.
✅ Key Features
Buckets & Objects – Organize files in buckets.
Storage Classes – Standard, IA (Infrequent Access), One Zone-IA, Glacier, Glacier Deep Archive.
Versioning – Keep multiple versions of an object.
Lifecycle Rules – Transition objects to cheaper storage automatically.
Cross-Region Replication (CRR) – Sync data across regions.
Encryption – SSE-S3, SSE-KMS, SSE-C (customer-managed keys).
Event Notifications – Trigger Lambda/SNS/SQS on object events.
📌 Exam Tips
S3 = Object storage, not block or file.
Max object size = 5 TB.
Strong read-after-write consistency.
Use Pre-Signed URLs to share objects securely.
MFA Delete for extra protection.
🌍 Example
A social media platform stores user-uploaded photos & videos in S3, uses CloudFront for CDN, and lifecycle rules to archive old files to Glacier.
🔹 Amazon S3 Glacier & Glacier Deep Archive
📖 What it is:
Archival storage with very low cost.
Used for infrequently accessed or compliance data.
✅ Key Features
Glacier → Retrieval in minutes to hours.
Deep Archive → Cheapest, retrieval can take up to 12–48 hours.
Integrated with S3 lifecycle policies.
📌 Exam Tips
If exam mentions “cheapest storage, not frequently accessed” → Glacier.
Retrieval tiers: Expedited, Standard, Bulk.
Deep Archive = lowest cost, longest retrieval time.
🌍 Example
A hospital stores patient X-ray images in Glacier Deep Archive for 10+ years to meet compliance requirements.
🔹 Amazon EBS (Elastic Block Store)
📖 What it is:
Block storage for EC2 instances.
Persistent, high-performance, AZ-scoped.
✅ Key Features
Types: gp2/gp3 (General SSD), io1/io2 (Provisioned IOPS), st1/sc1 (HDD).
Snapshots → Backup volumes, copy across AZ/Regions.
Encryption → Integrated with KMS.
Attach/Detach volumes between EC2 instances in same AZ.
📌 Exam Tips
EBS = Block storage tied to AZ.
Snapshots stored in S3.
Only gp2/gp3 & io1/io2 can be boot volumes.
Delete on Termination attribute for root volumes.
🌍 Example
An e-commerce app runs its MySQL database on EC2 using io2 EBS volumes for high IOPS and consistent performance.
🔹 Amazon EFS (Elastic File System)
📖 What it is:
Shared file storage (NFS) for EC2 and other AWS services.
Fully managed, scalable, and regional.
✅ Key Features
Standard & One Zone classes (multi-AZ vs single AZ).
Performance Modes: General Purpose, Max I/O.
Throughput Modes: Bursting, Provisioned.
Scales automatically to petabytes.
POSIX-compliant → Works like Linux file system.
📌 Exam Tips
EFS = File storage, multi-AZ, supports thousands of concurrent connections.
Pay only for storage used.
One Zone EFS = cheaper, less durable.
🌍 Example
A web app hosted on multiple EC2 instances stores user-uploaded documents in EFS so all instances can access the same files concurrently.
🔹 AWS Storage Gateway
📖 What it is:
Hybrid storage service connecting on-prem with AWS storage.
✅ Key Features
File Gateway – Store files in S3 with local cache.
Volume Gateway – Block storage with backups in S3.
Tape Gateway – Replace physical backup tapes with virtual tapes in S3/Glacier.
📌 Exam Tips
Exam scenario: If company has on-prem data center but wants AWS backup → Storage Gateway.
Tape Gateway often appears in exam for backup/archival replacement.
🌍 Example
A bank replaces its physical tape backups with AWS Storage Gateway (Tape Gateway), archiving to Glacier.
🔹 Amazon FSx
📖 What it is:
Managed file systems for specific workloads.
✅ Key Features
FSx for Windows File Server – Fully managed Windows file system (supports SMB & Active Directory).
FSx for Lustre – High-performance file system for HPC, ML, and big data (integrates with S3).
📌 Exam Tips
FSx = when you need specialized file systems.
Lustre = HPC, fast workloads.
Windows FSx = Windows apps requiring shared storage.
🌍 Example
A machine learning team trains models on large image datasets. They use FSx for Lustre to get high throughput, pulling data directly from S3.
🔹 Amazon RDS (Relational Database Service)
📖 What it is:
A managed relational database service.
Supports multiple engines: MySQL, PostgreSQL, MariaDB, Oracle, SQL Server, and Amazon Aurora.
Automates provisioning, patching, backups, and scaling.
✅ Key Features
Multi-AZ Deployment – Provides high availability & automatic failover (synchronous standby in another AZ).
Read Replicas – Scale read workloads (asynchronous replication, can be cross-region).
Automated Backups – Daily snapshots + transaction logs (point-in-time recovery).
Manual Snapshots – User-initiated backups stored in S3.
Storage Types: gp2/gp3 SSD, io1/io2 (high IOPS), magnetic.
Encryption – At rest (KMS), in transit (SSL).
IAM Integration – IAM authentication (for MySQL & PostgreSQL).
Performance Insights – Monitor database performance.
Scaling:
Vertical Scaling – Change instance type.
Horizontal Scaling – Add read replicas.
🛠 Use Cases
Applications requiring a managed relational database.
Running transactional systems (OLTP).
Multi-AZ setup for production databases with high availability.
Cross-region replicas for disaster recovery.
📌 Exam Tips
RDS vs DynamoDB:
RDS → Relational (SQL, structured schema).
DynamoDB → NoSQL, key-value store.
Multi-AZ = HA (automatic failover, not scaling).
Read Replicas = Scaling reads, not writes.
Backups stored in S3 automatically.
RDS Custom = lets you access underlying OS/DB (for Oracle, SQL Server).
RDS Proxy = connection pooling (reduces overhead for Lambda & apps).
If exam mentions “need automatic failover + relational DB” → RDS Multi-AZ.
Aurora is part of RDS family but optimized by AWS (we’ll cover it separately).
🌍 Real-World Example
An online food delivery app stores its orders, payments, and user data in Amazon RDS for PostgreSQL.
It runs in Multi-AZ mode for failover.
Uses Read Replicas to handle heavy read queries (e.g., customer order history).
Automated backups ensure they can restore data if something goes wrong.
🔹 Amazon Aurora
📖 What it is:
A relational database built by AWS.
Compatible with MySQL and PostgreSQL.
Provides up to 5x performance over MySQL and 3x over PostgreSQL on the same hardware.
Fully managed under the RDS family, but optimized for cloud-native scalability and durability.
✅ Key Features
High Availability:
Stores 6 copies of data across 3 AZs.
Automatic failover in less than 30 seconds.
Aurora Replicas:
Up to 15 read replicas with very low latency (vs 5 in RDS).
Replicas share the same underlying storage (faster replication).
Serverless Mode:
Auto-scales compute capacity based on usage.
Pay only for actual database usage.
Global Database:
Read-only replicas in multiple regions.
<1 second replication lag.
Backups & Snapshots:
Continuous backups to S3.
Point-in-time recovery supported.
Aurora Multi-Master:
Multiple read/write nodes (HA for writes).
Aurora Machine Learning Integration:
Direct integration with SageMaker & Comprehend for ML-based predictions inside SQL queries.
🛠 Use Cases
High-traffic web/mobile applications.
SaaS platforms requiring multi-tenant databases.
Global apps that need multi-region read replicas.
Use cases where RDS scaling isn’t enough.
📌 Exam Tips
Aurora vs RDS:
RDS = general-purpose managed database.
Aurora = AWS-optimized, higher performance & scalability.
Aurora Serverless = best when workloads are unpredictable.
Aurora Global Database = best when low-latency global reads are required.
Replication: Aurora replicas are faster and more scalable than RDS replicas.
If exam says:
“Need 15 read replicas” → Aurora.
“Need multi-region replication” → Aurora Global.
“Unpredictable workload, pay per use” → Aurora Serverless.
🌍 Real-World Example
A ride-sharing company uses Aurora PostgreSQL as its main transactional DB.
Drivers & riders generate thousands of requests per second.
Aurora provides fast replication with 15 read replicas for handling surge loads.
Aurora Global Database supports read traffic in different continents.
For late-night hours when traffic is low, they use Aurora Serverless to save costs.
🔹 Amazon DynamoDB
📖 What it is:
A fully managed NoSQL database service.
Key-Value & Document database.
Designed for millisecond latency at any scale.
Serverless — no need to manage servers, scaling, or replication.
✅ Key Features
Flexible Data Model – Stores items as key-value pairs or JSON-like documents.
Primary Keys:
Partition Key (unique ID for item).
Partition Key + Sort Key (composite key for range queries).
Performance:
On-demand capacity (auto scales).
Provisioned capacity (fixed RCU/WCU with Auto Scaling).
Global Tables – Multi-region replication for low-latency global apps.
DAX (DynamoDB Accelerator) – In-memory cache for microsecond latency.
Streams – Capture item-level changes (used for triggers with Lambda).
Time-to-Live (TTL) – Auto delete expired items.
Backup & Restore – Point-in-time recovery (35 days).
Transactions – Supports ACID transactions (multi-item, multi-table).
🛠 Use Cases
Gaming apps (leaderboards, user sessions).
IoT device data storage.
Shopping carts in e-commerce.
Mobile/web apps needing high throughput & low latency.
Event-driven applications with DynamoDB Streams + Lambda.
📌 Exam Tips
DynamoDB vs RDS:
DynamoDB → NoSQL, key-value, horizontal scaling, unlimited throughput.
RDS → Relational, structured schema, vertical + read replica scaling.
Provisioned vs On-Demand:
Provisioned → cheaper for steady workloads.
On-Demand → better for unpredictable workloads.
Global Tables = Multi-region, multi-master replication.
DAX = In-memory cache for performance (like ElastiCache for DynamoDB).
Streams often appear in exam → e.g., “trigger Lambda when items are updated.”
TTL helps delete old/unused data automatically (like sessions).
WCU/RCU:
1 WCU = 1KB write/sec.
1 RCU = 4KB read/sec (strongly consistent) or 2 reads/sec (eventually consistent).
🌍 Real-World Example
A gaming company uses DynamoDB to store real-time leaderboard scores.
Each player’s ID = partition key.
Scores are updated instantly with millisecond latency.
DynamoDB Streams trigger a Lambda function to update analytics.
During big tournaments, DynamoDB auto-scales to handle millions of requests per second.
🔹 Amazon ElastiCache
📖 What it is:
A fully managed in-memory caching service.
Supports Redis and Memcached engines.
Improves application performance by reducing database load and serving data from memory (microsecond latency).
✅ Key Features
Engines:
Redis → Advanced features (replication, persistence, pub/sub, clustering).
Memcached → Simple cache, multi-threaded, no persistence.
Use Cases:
Caching frequent queries (reduce DB load).
Session storage.
Real-time analytics.
High Availability: Multi-AZ with failover (for Redis).
Scaling: Supports sharding and auto-discovery of nodes.
Security: VPC, IAM authentication (Redis Auth), KMS encryption.
Monitoring: Integrated with CloudWatch.
🛠 Use Cases
Caching results of expensive queries (e.g., SQL joins, ML model inference).
Maintaining session state for web apps.
Real-time gaming leaderboards.
Storing frequently accessed metadata (like product catalog info).
📌 Exam Tips
Redis vs Memcached:
Redis = persistence, replication, clustering, pub/sub → more advanced.
Memcached = simple, fast, easy distributed caching.
If exam asks:
“Need multi-AZ failover, persistence, or pub/sub” → Redis.
“Need simple, distributed caching layer” → Memcached.
Often paired with RDS/DynamoDB to reduce query load.
TTL (time-to-live) supported → auto-expire cached data.
ElastiCache + Lambda → fast in-memory access for serverless apps.
🌍 Real-World Example
An e-commerce site uses RDS MySQL for its product catalog.
To handle Black Friday traffic, they use ElastiCache Redis to cache frequently accessed product details and prices.
Users see product info in microseconds instead of waiting for DB queries.
Even if RDS is under heavy load, cached results keep the site responsive.
🔹 Amazon Neptune
📖 What it is:
A fully managed graph database service.
Optimized for storing and querying highly connected data.
Supports Property Graph and RDF (Resource Description Framework) models.
✅ Key Features
Graph Models:
Property Graph (uses Gremlin query language).
RDF Graphs (uses SPARQL query language).
Performance: Designed for queries with billions of relationships at millisecond latency.
High Availability:
Multi-AZ deployments.
Replication with up to 15 read replicas.
Durability: Storage replicated across 3 AZs.
Security:
VPC, IAM, and KMS integration.
SSL for in-transit encryption.
Backups: Continuous to S3 + point-in-time recovery.
🛠 Use Cases
Social networking apps (friend-of-a-friend queries).
Fraud detection (detecting suspicious relationships between entities).
Knowledge graphs (e.g., Wikipedia-style linked data).
Recommendation engines (e.g., “people who bought this also bought…”).
Network/IT operations (mapping dependencies between systems).
📌 Exam Tips
When to choose Neptune:
If the exam mentions “graph relationships, social networks, fraud detection, recommendation engines” → choose Neptune.
Query Languages:
Property Graph → Gremlin.
RDF → SPARQL.
Replication: Up to 15 read replicas.
Durability: Storage across 3 AZs.
Don’t confuse with DynamoDB → DynamoDB is NoSQL (key-value/doc store), not graph.
Backups stored in S3 automatically.
🌍 Real-World Example
A banking system uses Neptune for fraud detection.
It stores transactions as nodes and relationships between accounts.
Neptune can quickly detect suspicious patterns like one account transferring money to multiple flagged accounts.
With millisecond queries, fraud alerts can be raised in real-time.
🔹 Amazon Redshift
📖 What it is:
A fully managed data warehouse service.
Designed for online analytical processing (OLAP) → analyzing large volumes of structured/semi-structured data.
Can query petabytes of data using SQL.
✅ Key Features
Columnar Storage – Stores data by columns (not rows) for fast analytical queries.
Massively Parallel Processing (MPP) – Distributes queries across multiple nodes.
Redshift Spectrum – Query data directly in S3 without loading into Redshift.
Concurrency Scaling – Adds extra cluster capacity automatically for high query loads.
RA3 Nodes – Separate compute and storage (data stored in S3 but cached locally).
Materialized Views – Pre-computed query results for faster performance.
Integrations – With QuickSight, S3, Glue, Data Lake, Kinesis.
Security – VPC, IAM, KMS encryption, audit logging.
🛠 Use Cases
Business Intelligence (BI) dashboards.
Log and clickstream analytics.
Data lake analytics (via S3 + Spectrum).
Financial reporting and forecasting.
Large-scale ETL workloads.
📌 Exam Tips
RDS vs Redshift:
RDS → OLTP (transactions).
Redshift → OLAP (analytics).
Redshift Spectrum = queries S3 data directly (no ETL needed).
Node Types:
RA3 → most exam-relevant (separates compute/storage).
DS2/DC2 → older node families.
Snapshots → stored in S3, can be cross-region.
Performance: Columnar storage + compression → faster queries.
Concurrency Scaling → solves “many users running queries at same time” problem.
Exam scenario clue: “Data warehouse, petabyte scale analytics, OLAP, BI reporting” → Answer = Redshift.
🌍 Real-World Example
A retail company collects billions of transaction records across thousands of stores.
They load sales data into Amazon Redshift.
Analysts run complex SQL queries (e.g., sales trends, customer behavior, inventory forecasting).
Using Redshift Spectrum, they query historical data in S3 without importing it.
Results are visualized in QuickSight dashboards for executives.
🔹 Amazon QLDB
📖 What it is:
A fully managed ledger database by AWS.
Provides an immutable, cryptographically verifiable transaction log.
Best for systems requiring auditability, integrity, and transparency.
Not blockchain, but blockchain-like features (centralized, managed by AWS).
✅ Key Features
Immutable Journal – Data cannot be altered or deleted once written.
Cryptographic Verification – Uses cryptographic hash chains (SHA-256) to verify data integrity.
Transparent – Every change is recorded in the journal, with full history.
Performance – Runs SQL-like queries (PartiQL, compatible with SQL).
Serverless – Fully managed, scales automatically.
Integrations – Works with KMS, IAM, CloudWatch.
🛠 Use Cases
Financial transactions (auditable trails).
Supply chain tracking.
Insurance claims processing.
Government records (land/property registries, identity verification).
HR & payroll audit logs.
📌 Exam Tips
QLDB vs Blockchain (Managed Blockchain):
QLDB → Centralized, AWS-owned ledger.
Blockchain → Decentralized, multi-party.
QLDB vs RDS/DynamoDB:
RDS/DynamoDB → General-purpose databases.
QLDB → Ledger, immutability + cryptographic verification.
PartiQL – SQL-compatible query language used with QLDB.
Exam clue: If the question mentions “ledger, audit trail, immutable, cryptographically verifiable history” → QLDB.
🌍 Real-World Example
A logistics company uses Amazon QLDB to track every step in its supply chain.
Each shipment update (created, in-transit, delivered) is written to QLDB.
Customers and regulators can verify the integrity of shipment records cryptographically.
Unlike a traditional DB, records can’t be tampered with, ensuring trust & compliance.
🔹 Amazon DocumentDB (with MongoDB compatibility)
📖 What it is:
A fully managed document database service.
Designed to be MongoDB-compatible, so applications using MongoDB drivers/tools can work with DocumentDB with little to no code change.
Stores data in JSON-like documents.
✅ Key Features
Data Model: Document-oriented (JSON), flexible schema.
MongoDB API Compatibility – Works with MongoDB drivers, making migration easier.
High Availability:
Storage automatically replicated across 3 AZs.
Auto-healing storage system.
Scalability:
Storage auto-scales up to 64 TB per cluster.
Up to 15 read replicas for read scaling.
Security:
Encryption at rest (KMS) + in transit (TLS).
VPC isolation & IAM integration.
Backups: Continuous backups to S3 with point-in-time recovery.
Fully Managed: No manual patching or maintenance required.
🛠 Use Cases
Content management systems (blogs, news portals).
User profiles and session data.
Product catalogs for e-commerce platforms.
Mobile/web apps requiring flexible schema.
IoT applications storing JSON sensor data.
📌 Exam Tips
DocumentDB vs DynamoDB:
DocumentDB → Document-oriented, MongoDB API compatible, managed by AWS.
DynamoDB → Key-value/NoSQL, serverless, extremely scalable.
DocumentDB vs RDS:
RDS → Relational, structured schema.
DocumentDB → NoSQL document store (JSON).
Storage scaling: Automatically grows (up to 64 TB).
Replication: Multi-AZ replication built-in, with read replicas.
If exam says “MongoDB compatibility” → DocumentDB.
If exam says “serverless, key-value, highly scalable NoSQL” → DynamoDB.
🌍 Real-World Example
A news website uses Amazon DocumentDB to store articles, comments, and user profiles.
Since JSON format is flexible, new fields (like “reactions” or “tags”) can be added without schema changes.
The site scales read-heavy workloads with read replicas during peak traffic.
Automated backups keep content safe, and developers can use existing MongoDB drivers without rewriting their app.
🔹 Amazon Keyspaces (for Apache Cassandra)
📖 What it is:
A fully managed database service compatible with Apache Cassandra.
Serverless, scalable, and highly available.
Uses the same CQL (Cassandra Query Language) as Cassandra, making migration seamless.
✅ Key Features
Serverless & Scalable: Auto-scales tables up/down to meet demand.
Cassandra Compatibility: Use existing Cassandra drivers and tools.
Data Model: Wide-column store (similar to Cassandra).
Replication & Durability: Data is replicated across 3 AZs for fault tolerance.
Performance: Single-digit millisecond latency.
Capacity Modes:
On-Demand – Pay per request.
Provisioned – Set read/write capacity units (RCUs/WCUs), with auto-scaling.
Security:
Encryption at rest (KMS) + in transit (TLS).
IAM for authentication/authorization.
Backups: Point-in-time recovery for up to 35 days.
🛠 Use Cases
IoT data collection (large-scale, fast writes).
Messaging and chat apps (time-series data).
Recommendation systems.
Inventory and product catalogs.
Any Cassandra-based workload moving to a managed service.
📌 Exam Tips
Keyspaces vs DynamoDB:
Keyspaces → Cassandra-compatible, wide-column NoSQL, CQL queries.
DynamoDB → Key-value/NoSQL, AWS-native, uses API not SQL-like queries.
Keyspaces vs DocumentDB:
Keyspaces → Cassandra workloads.
DocumentDB → MongoDB workloads.
Serverless: No cluster management, scaling is automatic.
Replication: Multi-AZ replication built-in (like DynamoDB).
If exam mentions “Apache Cassandra compatibility” → Answer is Keyspaces.
🌍 Real-World Example
A telecom company uses Amazon Keyspaces to store call detail records (CDRs) for millions of customers.
Data is written at very high velocity (millions of inserts per second).
Queries like “get all calls from a phone number in the last 30 days” are run using CQL.
With on-demand mode, they only pay for the queries made instead of provisioning clusters.
🔹 Amazon Timestream
📖 What it is:
A fully managed time-series database.
Optimized for data that changes over time (timestamps + values).
Serverless, scalable, and much faster than relational DBs for time-series workloads.
✅ Key Features
Purpose-built for time-series data → automatically stores and organizes data by time intervals.
Fast Queries → up to 1,000x faster than relational DBs for time-series.
Serverless → auto-scales, no infrastructure management.
Data Lifecycle Management → Automatically moves older data to cheaper storage tiers.
Integrations → IoT Core, Kinesis, CloudWatch, Grafana, and ML tools.
SQL-like Queries → Uses familiar syntax for developers.
Security → VPC isolation, IAM access control, KMS encryption.
🛠 Use Cases
IoT sensor data (temperature, pressure, GPS).
DevOps monitoring (server metrics, application logs).
Industrial telemetry (factory machines, production lines).
Smart cities (traffic data, energy usage).
Financial tick data (stock trades, crypto transactions).
📌 Exam Tips
When to use Timestream: If exam mentions “time-series, metrics, telemetry, IoT, or time-based queries” → Timestream.
Comparison:
DynamoDB → General-purpose NoSQL.
Timestream → Specialized for time-series, optimized queries.
Data Lifecycle → Moves hot data to memory and cold data to cost-efficient storage.
Integration with CloudWatch & IoT Core is exam-relevant.
Serverless → no provisioning or capacity planning required.
🌍 Real-World Example
A smart city project uses Amazon Timestream to store traffic sensor data from thousands of intersections.
Sensors report traffic flow every second.
Timestream automatically stores new data in memory for fast queries.
Old data is moved to cheaper storage for historical analysis.
City planners run queries like “average traffic volume per hour in the last 6 months” in real time.
🔹 Amazon Athena
📖 What it is:
An interactive query service that lets you run SQL queries directly on data stored in S3.
Serverless → no infrastructure, pay only for queries (per TB scanned).
Great for analytics on structured, semi-structured, and unstructured data.
✅ Key Features
Query Engine: Uses Presto/Trino (distributed SQL engine).
Supported Formats: CSV, JSON, Parquet, ORC, Avro.
Schema on Read: Define schema when you query (no need to load data).
Integrations: Works with Glue Data Catalog (for schema/metadata).
Output: Query results stored in S3 automatically.
Security: IAM-based access, KMS encryption, PrivateLink for secure connections.
🛠 Use Cases
Ad-hoc data exploration.
Log analysis (CloudTrail, VPC Flow Logs, ELB logs).
Running analytics on data lakes in S3.
ETL validation before loading data into Redshift.
Cost-efficient queries for one-off reporting.
📌 Exam Tips
Athena vs Redshift Spectrum:
Athena → Standalone service for querying data in S3.
Redshift Spectrum → Extension of Redshift to query external S3 data.
Pricing: Charged per TB scanned, optimize by using columnar formats (Parquet/ORC) + compression.
Schema on Read = exam keyword.
Serverless → no infrastructure to manage.
Often paired with S3 + Glue + QuickSight for analytics pipelines.
🌍 Real-World Example
A security team wants to analyze AWS CloudTrail logs stored in S3.
Instead of loading logs into a database, they run SQL queries directly with Athena.
Queries like:
“Which IAM user made the most API calls last week?”
“How many failed login attempts happened in the last 24 hours?”
Since Athena is serverless, they only pay for queries run (no database costs).
🔹 Amazon Glue
📖 What it is:
A fully managed ETL (Extract, Transform, Load) service.
Also provides a central Data Catalog to manage metadata about data sources.
Serverless → no infrastructure to manage.
✅ Key Features
Glue Data Catalog – Central metadata repository (like a Hive Metastore).
Crawlers – Automatically scan data sources (S3, RDS, Redshift, DynamoDB) and infer schema.
ETL Jobs – Runs serverless jobs using Spark or Python to transform and clean data.
Glue Studio – Visual interface to create and monitor ETL jobs.
Glue DataBrew – No-code data preparation tool.
Glue Workflows – Orchestrates multiple jobs and crawlers.
Integration – Works with Athena, Redshift, S3, Lake Formation, EMR.
🛠 Use Cases
Building a data lake on S3.
Preparing data for analytics in Athena/Redshift.
Cleaning IoT logs before analysis.
Metadata management across data sources.
Automating ETL pipelines without managing servers.
📌 Exam Tips
Athena vs Glue:
Athena → Query S3 data directly.
Glue → Prepares/transforms data + manages schemas.
Glue Data Catalog → central place for storing table definitions & schemas.
Crawlers → automatically discover schema (exam loves this keyword).
Glue ETL Jobs run on Apache Spark.
Glue DataBrew = no-code data prep for analysts.
If exam mentions “ETL, schema discovery, Data Catalog” → Glue.
🌍 Real-World Example
A media company collects clickstream logs from millions of website visitors.
Logs are stored in S3 (raw format, JSON).
Glue Crawlers detect schema and update the Data Catalog.
Glue ETL jobs clean/transform data (parse timestamps, filter invalid records).
Data is then queried with Athena or loaded into Redshift for BI dashboards.
🔹 Amazon DMS (Database Migration Service)
📖 What it is:
A fully managed service that helps migrate databases to AWS quickly and securely.
Supports homogeneous migrations (e.g., Oracle → Oracle) and heterogeneous migrations (e.g., SQL Server → Aurora).
Minimizes downtime during migration (continuous replication supported).
✅ Key Features
Source & Target Support:
Sources: On-prem DBs, EC2 DBs, RDS, DynamoDB, S3, etc.
Targets: RDS, Aurora, Redshift, DynamoDB, S3.
Replication Types:
Full Load – One-time copy of existing data.
CDC (Change Data Capture) – Replicates ongoing changes with minimal downtime.
Schema Conversion Tool (SCT) – Converts schema when migrating across engines (e.g., Oracle → Aurora PostgreSQL).
Resiliency – Self-healing replication instance.
Security – Encryption (KMS), VPC isolation.
🛠 Use Cases
Migrating on-prem databases to AWS.
Migrating between AWS DB engines (e.g., RDS MySQL → Aurora).
Continuous replication for disaster recovery.
Migrating to data lakes (RDS → S3).
Multi-region replication for compliance or latency reasons.
📌 Exam Tips
DMS vs SCT:
DMS → Moves the data.
SCT → Converts schema (needed for heterogeneous migrations).
Minimal downtime is the keyword → use DMS with CDC.
Exam may mention:
“Migrate Oracle to Aurora PostgreSQL with minimal downtime” → DMS + SCT.
Supports ongoing replication (not just one-time migration).
Data is migrated securely → encrypted at rest & in transit.
🌍 Real-World Example
A banking company wants to move from on-prem Oracle DB to Amazon Aurora PostgreSQL.
They use AWS SCT to convert the schema from Oracle → PostgreSQL.
Then they use DMS for:
Initial full load of all tables.
Ongoing replication (CDC) to capture new transactions.
After validating, they cut over to Aurora with near-zero downtime.
🔹 Amazon EMR (Elastic MapReduce)
📖 What it is:
A managed big data platform for processing vast amounts of data.
Runs open-source frameworks like Apache Spark, Hadoop, Hive, Presto, HBase, Flink.
Cost-effective and scalable for data lakes, ETL, and analytics.
✅ Key Features
Cluster-based: Creates EMR clusters with master + core + task nodes.
Auto Scaling: Add/remove nodes automatically based on workloads.
Integration: Works with S3 (data lake), DynamoDB, Redshift, and Glue.
Pricing: Can use Spot Instances to reduce costs.
EMR Studio: Web-based IDE for data scientists.
Custom Applications: Can install and run additional open-source big data tools.
Security: VPC, IAM, Kerberos authentication, encryption at rest/in transit.
🛠 Use Cases
Large-scale ETL pipelines.
Data lake processing (structured & unstructured data).
Real-time streaming analytics.
Machine learning model training (using Spark MLlib).
Genomics and scientific research with massive datasets.
📌 Exam Tips
EMR vs Glue:
Glue → Serverless ETL (simpler, managed).
EMR → Full control over big data frameworks (customizable, more powerful).
Storage: Typically uses S3 as primary storage, not HDFS (exam trick).
Cluster Node Types:
Master → Manages cluster.
Core → Runs tasks & stores data.
Task → Only runs tasks (no data storage).
Spot Instances: Popular for reducing EMR costs.
If exam mentions “Hadoop, Spark, Presto, Hive, big data processing” → EMR.
🌍 Real-World Example
A healthcare company analyzes genomic data (petabytes in size) for medical research.
Data is stored in S3.
They spin up an EMR cluster with Spark to run distributed computations.
Results are saved back to S3 and queried with Athena.
To cut costs, they run task nodes on Spot Instances.
🔹 Amazon Kinesis
📖 What it is:
A fully managed service for real-time data streaming & analytics.
Ingests, processes, and analyzes large streams of data in real time.
Scales automatically to handle gigabytes of data per second.
✅ Key Components
Kinesis Data Streams (KDS)
Collects and stores data streams.
Data is stored in shards (throughput unit).
Retention up to 7 days (default 24 hrs).
Consumers can process data in parallel.
Kinesis Data Firehose
Loads streaming data into destinations → S3, Redshift, OpenSearch, Splunk.
Fully managed (no custom consumers needed).
Can batch, compress, and encrypt data before delivery.
Kinesis Data Analytics
Run SQL queries on streaming data.
Supports real-time dashboards & anomaly detection.
Kinesis Video Streams
Ingests & processes video streams for real-time analytics, ML, or playback.
🛠 Use Cases
Real-time log and metric monitoring.
Fraud detection on financial transactions.
IoT sensor data ingestion.
Video surveillance analytics.
Social media data ingestion & analysis.
📌 Exam Tips
Kinesis Data Streams vs Firehose:
Data Streams → custom apps needed to process.
Firehose → auto-loads to S3/Redshift/other services, no custom code.
Kinesis vs SQS:
SQS → messaging (point-to-point, no replay).
Kinesis → streaming (real-time analytics, can replay data).
Shard scaling: More shards = more throughput.
Retention: 1–7 days (configurable).
Kinesis Data Analytics = SQL on streaming data.
If exam mentions “real-time ingestion + analytics” → Kinesis.
🌍 Real-World Example
A ride-hailing app uses Kinesis Data Streams to collect real-time GPS data from drivers.
Data is streamed into Kinesis in real-time.
Kinesis Data Analytics runs SQL queries to detect traffic congestion.
Processed data is sent via Firehose into S3 and Redshift for further BI analysis.
This enables real-time ETA updates for riders.
🔹 Amazon QuickSight
📖 What it is:
A cloud-powered Business Intelligence (BI) service.
Lets you create interactive dashboards, reports, and visualizations.
Fully managed and scales automatically.
✅ Key Features
Data Sources: Connects to S3, Redshift, RDS, Athena, DynamoDB, Salesforce, Excel/CSV, on-prem databases.
SPICE Engine (Super-fast, Parallel, In-memory Calculation Engine):
In-memory caching for fast queries at scale.
Handles millions of users with sub-second response.
Machine Learning Insights:
Built-in ML for anomaly detection, forecasting, and natural language queries (“Q” feature).
Access Control: Row-level security + IAM integration.
Collaboration: Share dashboards with teams securely.
Pricing: Pay-per-session or per-user (very exam-relevant).
🛠 Use Cases
Executive dashboards (sales, finance, operations).
Real-time analytics visualization.
Forecasting revenue & customer trends.
Monitoring IoT data dashboards.
Embedding BI into web/mobile apps.
📌 Exam Tips
QuickSight vs Tableau/PowerBI: QuickSight is AWS-native, serverless, pay-per-session, integrates directly with AWS services.
SPICE → keyword for exam: in-memory caching for performance.
Integration: If exam says “visualize data from S3/Athena/Redshift” → QuickSight.
Natural Language Queries (Q): Allows users to ask questions like “What were sales last month?” and get charts.
Pricing: Pay-per-session makes it cheaper than traditional BI tools.
🌍 Real-World Example
A retail chain uses QuickSight to monitor daily sales data.
Data is ingested into Redshift and S3.
QuickSight dashboards are created for store managers to track sales, revenue, and inventory.
Executives use ML-powered anomaly detection in QuickSight to spot unusual spikes in sales.
Since QuickSight is pay-per-session, the company saves money compared to traditional BI licenses.
🔹 AWS Data Pipeline
📖 What it is:
A managed ETL workflow service that helps move and transform data between AWS services and on-prem sources.
Lets you define pipelines that specify data sources, processing logic, and destinations.
Unlike Glue (serverless ETL), Data Pipeline focuses more on scheduling and orchestration.
✅ Key Features
Data Movement: Transfer data between S3, RDS, DynamoDB, Redshift, EMR, and on-prem.
Orchestration: Define dependencies and schedules for jobs.
Execution Environment: Can run tasks on EC2 or EMR clusters.
Fault Tolerance: Retries tasks automatically if failures occur.
Custom Scripts: Supports Shell commands, SQL, or MapReduce for transformations.
Security: IAM policies, VPC support, KMS encryption.
🛠 Use Cases
Periodically moving data from on-prem databases → AWS S3/Redshift.
ETL jobs that require complex scheduling (e.g., every hour/day).
Archiving logs from DynamoDB to S3.
Running batch processing workflows with EMR.
Preparing datasets for machine learning pipelines.
📌 Exam Tips
Glue vs Data Pipeline:
Glue → Serverless ETL, auto-schema discovery, modern.
Data Pipeline → Orchestration + scheduling, supports on-prem & custom scripts.
If exam mentions “move data on a schedule between AWS services” → Data Pipeline.
EMR Integration: Good for MapReduce/Hadoop-style batch jobs.
Retry logic & error handling built-in (important keyword).
Think of it as a workflow automation tool for data.
🌍 Real-World Example
A financial services company wants to copy transaction records from their on-prem Oracle DB to Amazon S3 daily at midnight.
They use AWS Data Pipeline to schedule the extraction.
The data is transformed via a SQL script before being loaded into Redshift.
Analysts then run BI dashboards on Redshift the next morning.
🔹 AWS Lake Formation
📖 What it is:
A fully managed service that makes it easy to set up, secure, and manage a data lake on AWS.
Works closely with S3, Glue, and Athena.
Simplifies building a centralized, secure data lake for analytics.
✅ Key Features
Data Lake Creation: Point Lake Formation to data in S3 (raw logs, files, DB exports), and it organizes + catalogs it.
Centralized Permissions: Fine-grained access control across services (e.g., which user can query which tables in Athena/Redshift).
Data Catalog: Uses the same Glue Data Catalog for metadata.
Data Transformation: Uses Glue jobs for ETL before storing in the lake.
Security: Integration with IAM, KMS, and AWS Organizations for governance.
Cross-Service Sharing: Define once, enforce everywhere (Athena, Redshift, EMR, QuickSight).
🛠 Use Cases
Building a secure enterprise data lake in S3.
Centralized governance of analytics data.
Fine-grained data sharing between departments.
Compliance use cases → enforce data access rules.
Onboarding new datasets quickly into analytics pipelines.
📌 Exam Tips
Lake Formation vs Glue:
Glue → ETL + Data Catalog (technical data prep).
Lake Formation → Governance, permissions, and central management of the data lake.
If exam mentions “set up a secure data lake on S3 quickly” → Lake Formation.
Fine-grained permissions → A keyword in questions (column/table-level).
Works hand-in-hand with Athena, Redshift Spectrum, EMR, and QuickSight.
🌍 Real-World Example
A large insurance company wants to centralize policyholder and claims data from multiple sources.
Data is ingested into S3.
Lake Formation organizes it into a secure data lake and applies access rules (e.g., actuaries can see claims data, but not customer PII).
Analysts query with Athena and visualize with QuickSight, all governed by Lake Formation’s access policies.
🔹 Amazon VPC (Virtual Private Cloud)
📖 What it is:
A logically isolated virtual network in AWS where you can launch AWS resources.
Gives you full control over IP addressing, subnets, routing, firewalls, and connectivity.
Essentially, your own private network inside AWS.
✅ Key Features
Subnets:
Public Subnet → Internet-facing resources (e.g., web servers).
Private Subnet → Internal-only resources (e.g., DBs, app servers).
Route Tables → Control traffic routing inside the VPC.
Internet Gateway (IGW) → Allows communication between VPC and internet.
NAT Gateway / NAT Instance → Lets private subnets access internet (outbound only).
VPC Peering → Connects two VPCs privately.
Transit Gateway → Central hub for connecting multiple VPCs + on-prem networks.
Security:
Security Groups (instance-level, stateful).
NACLs (Network ACLs) (subnet-level, stateless).
VPC Endpoints: Connect privately to AWS services without using the internet.
Interface Endpoints (ENIs).
Gateway Endpoints (S3 & DynamoDB only).
🛠 Use Cases
Hosting secure multi-tier applications.
Isolating workloads (e.g., dev vs prod environments).
Extending corporate data centers into AWS (via VPN or Direct Connect).
Running hybrid cloud architectures.
Building secure data lakes (private access to S3 with VPC endpoints).
📌 Exam Tips
Security Groups vs NACLs:
SG → Instance-level, stateful, allow rules only.
NACL → Subnet-level, stateless, allow + deny rules.
NAT Gateway vs Internet Gateway:
NAT → Outbound internet from private subnet.
IGW → Both inbound & outbound for public subnet.
Endpoints:
Gateway Endpoint → Only for S3 & DynamoDB.
Interface Endpoint → For other AWS services via PrivateLink.
VPC Peering → Only point-to-point, no transitive peering.
Transit Gateway → Multi-VPC, scalable hub.
CIDR Blocks → /16 (65,536 IPs) to /28 (16 IPs).
If exam says “isolated network, control over IPs, subnets, firewalls” → VPC.
🌍 Real-World Example
A fintech company deploys its web app in AWS:
Public Subnet → EC2 web servers with Elastic IPs.
Private Subnet → RDS database and app servers.
NAT Gateway → Lets app servers fetch patches/updates without exposing them.
VPC Endpoint for S3 → Ensures DB backups stay inside AWS private network (no internet).
Security Groups → Allow web servers HTTP/HTTPS from the internet, but restrict DB access to only app servers.
🔹 Amazon CloudFront
📖 What it is:
A global CDN service that delivers content (websites, videos, APIs, applications) with low latency and high transfer speeds.
Uses a worldwide network of Edge Locations and Regional Edge Caches.
✅ Key Features
Content Caching: Stores content closer to users at edge locations.
Dynamic & Static Content: Works for both (HTML, CSS, JS, images, APIs, live video).
Integration: Works with S3, EC2, ALB, API Gateway, Media Services.
Security:
Integrated with AWS Shield (DDoS protection).
AWS WAF (Web Application Firewall) for filtering malicious requests.
Signed URLs/Cookies for content access control.
HTTPS Support: Free SSL/TLS with ACM (AWS Certificate Manager).
Lambda@Edge: Run serverless functions at edge locations for request/response manipulation.
Global Presence: Hundreds of edge locations worldwide.
🛠 Use Cases
Accelerating websites and APIs.
Video streaming (live & on-demand).
Software downloads with low latency.
Protecting applications from DDoS attacks.
Running security/auth logic at the edge (with Lambda@Edge).
📌 Exam Tips
CloudFront + S3:
S3 (origin) + CloudFront (edge distribution) → faster global delivery.
CloudFront vs S3 Transfer Acceleration:
CloudFront → CDN with caching + WAF/Shield integration.
S3 Transfer Acceleration → Speeds up uploads to a single S3 bucket.
CloudFront + WAF/Shield: Popular exam combo for security.
Lambda@Edge: Exam keyword → “customize content at the edge”.
Signed URLs/Cookies: For restricting private content (like paid video streaming).
If exam says “global content delivery with caching, low latency” → CloudFront.
🌍 Real-World Example
A streaming platform (like Netflix-style service) uses CloudFront to deliver HD movies globally.
Movies are stored in S3 buckets.
CloudFront caches them at edge locations worldwide.
Users stream from their nearest edge → low latency, no buffering.
Signed URLs ensure only paid subscribers can access premium videos.
AWS Shield + WAF protect against DDoS and malicious traffic.
🔹 Amazon Route 53
📖 What it is:
A highly available and scalable Domain Name System (DNS) web service.
Provides domain registration, DNS routing, and health checking.
Fully integrated with AWS services but also works with external resources.
✅ Key Features
DNS Resolution
Translates domain names → IP addresses.
Authoritative + recursive DNS support.
Domain Registration
Register/manage domains directly in Route 53.
Routing Policies
Simple Routing → Single resource (basic use case).
Weighted Routing → Split traffic across resources by percentage.
Latency-Based Routing → Send users to the lowest-latency region.
Geolocation Routing → Route users based on geographic location.
Geoproximity Routing → Based on location bias, can shift traffic.
Failover Routing → Active-passive setup (high availability).
Multi-Value Answer → Return multiple IPs with health checks.
Health Checks & Monitoring
Monitors endpoints and reroutes traffic on failure.
Integration
Works with CloudFront, ALB, S3 static hosting, API Gateway.
🛠 Use Cases
Hosting websites with domain names.
Global load balancing across regions.
Failover disaster recovery.
Routing mobile app traffic to nearest region.
Managing hybrid/multi-cloud DNS.
📌 Exam Tips
Routing Policies are exam favorites → know each type.
Failover Routing → “active-passive DR site” keyword.
Latency-based routing → “direct users to lowest-latency region”.
Weighted routing → “A/B testing or gradual migrations”.
Geolocation routing → “users from EU → EU servers”.
Route 53 Health Checks → automatic failover if endpoint is unhealthy.
Fully integrates with CloudFront + S3 static website hosting.
🌍 Real-World Example
A global e-commerce company uses Route 53 to manage traffic:
Latency-based routing ensures US users hit US-East servers, while EU users hit Ireland servers.
Failover routing → if primary payment API fails, traffic is routed to a backup region.
Weighted routing → A/B testing a new checkout system (10% new, 90% old).
Domain name (e.g., shopmyworld.com) is registered and managed in Route 53.
🔹 Amazon API Gateway
📖 What it is:
A fully managed service to create, publish, secure, monitor, and manage APIs at scale.
Supports REST APIs, WebSocket APIs (real-time communication), and HTTP APIs (lighter, cheaper).
Handles traffic management, security, and monitoring for APIs.
✅ Key Features
API Types:
REST API → Full-featured, flexible.
HTTP API → Faster, cheaper, for simple workloads.
WebSocket API → Real-time, 2-way communication (chat, gaming).
Integrations: Works with Lambda, EC2, DynamoDB, S3, Step Functions, VPC private endpoints.
Throttling & Caching: Control request rates and reduce latency.
Security:
IAM roles & policies.
Lambda authorizers.
Cognito user pools (JWT).
API Keys.
Monitoring: Integrated with CloudWatch (metrics, logs, alarms).
Deployment: Multiple stages (dev, test, prod).
Global: APIs can be deployed worldwide.
🛠 Use Cases
Expose microservices securely.
Backend for mobile or web apps.
Real-time apps like chat/messaging.
IoT device communication.
Proxy for existing services running in VPC.
📌 Exam Tips
API Gateway vs ALB:
API Gateway → Managed APIs, caching, auth, rate limiting, WebSockets.
ALB → Basic HTTP routing, no API management features.
API Gateway + Lambda = Serverless backend pattern (very common exam question).
Throttling: Protects backend from being overwhelmed.
Caching: Reduces repeated calls, improves latency.
Authentication:
Cognito → best for user pools (sign-in/sign-up).
IAM roles → service-to-service.
Lambda authorizer → custom auth.
If exam mentions “build and expose secure APIs at scale” → API Gateway.
🌍 Real-World Example
A food delivery app uses API Gateway as the entry point for mobile apps:
Customer mobile app calls API Gateway to place orders.
API Gateway triggers Lambda functions that interact with DynamoDB (order info), RDS (menu data), and SNS (notifications).
Cognito handles customer authentication.
Throttling protects backend during traffic spikes (like lunch/dinner time).
🔹 AWS Direct Connect (DX)
📖 What it is:
A dedicated private network connection between your on-premises data center and AWS.
Provides low latency, high bandwidth, and more consistent performance than internet-based VPN.
Useful for hybrid cloud setups and sensitive workloads.
✅ Key Features
Dedicated Connection: Physical fiber link between your premises and AWS.
High Bandwidth: Supports 1 Gbps, 10 Gbps, and 100 Gbps connections.
Consistency: More reliable than internet VPN (no congestion or latency spikes).
Hybrid Networking: Can be combined with VPC + Transit Gateway.
Encryption: Direct Connect itself isn’t encrypted, but can be paired with VPN over DX for encryption.
Virtual Interfaces (VIFs):
Private VIF → Connects directly to VPC.
Public VIF → Connects to AWS public services (S3, DynamoDB, etc.).
Transit VIF → Connects to multiple VPCs via Transit Gateway.
🛠 Use Cases
Hybrid cloud architecture (extending on-prem data centers into AWS).
Real-time financial trading apps (low latency required).
Large data transfers (backup, ML training datasets).
Consistent network performance for enterprise workloads.
Compliance-driven industries (finance, healthcare, government).
📌 Exam Tips
Direct Connect vs VPN:
VPN → Quick setup, encrypted, but over the public internet (variable latency).
Direct Connect → Dedicated, predictable, higher bandwidth, not encrypted by default.
DX + VPN → Best of both worlds (dedicated + encryption + failover).
DX Gateway: Connects DX to multiple VPCs (multi-region supported).
Transit VIF: For connecting DX → Transit Gateway → multiple VPCs.
If exam says “consistent performance, hybrid setup, private link” → Direct Connect.
🌍 Real-World Example
A bank runs a core banking system on-prem but uses AWS for analytics and fraud detection.
They use AWS Direct Connect for a dedicated 10 Gbps link to transfer millions of transactions daily with low latency.
For security, they add a VPN over Direct Connect for encryption.
Using a Transit VIF, they connect multiple AWS VPCs (Dev, Analytics, Backup) via a single DX connection.
🔹 AWS Transit Gateway (TGW)
📖 What it is:
A network transit hub that connects multiple VPCs, on-prem networks, and AWS accounts.
Simplifies network architecture by acting as a central router.
Replaces complex VPC peering mesh networks.
✅ Key Features
Centralized Hub → One-to-many connectivity (VPC ↔ TGW ↔ On-prem).
Scalable → Supports thousands of VPCs.
Simplified Management → No need for multiple peering connections.
Multi-Account → Works across AWS accounts (via Resource Access Manager).
High Performance → Up to 50 Gbps per attachment.
Connectivity Options:
VPN → On-premises.
Direct Connect → Private dedicated connections.
Routing Control → Route tables per TGW to segment traffic.
Security → Integration with Security Groups, NACLs, and firewall appliances.
🛠 Use Cases
Large enterprises with multi-VPC architectures.
Hybrid cloud (on-prem ↔ AWS via VPN or Direct Connect).
Multi-account setups (centralized networking for an organization).
Centralized monitoring & security enforcement.
Migrating workloads from on-prem into multiple AWS regions.
📌 Exam Tips
Transit Gateway vs VPC Peering:
Peering = point-to-point (no transitive routing).
TGW = hub-and-spoke, supports transitive routing.
TGW vs DX Gateway:
DX Gateway → Connects Direct Connect to multiple VPCs.
TGW → Connects multiple VPCs and VPNs in a hub.
TGW Routing Tables → Can isolate networks (Prod vs Dev).
If exam mentions “central hub for connecting 100+ VPCs and on-prem” → TGW.
🌍 Real-World Example
A global retail company runs workloads across 50+ VPCs (per region & per department).
Instead of creating hundreds of VPC peering connections, they use a Transit Gateway.
TGW connects:
VPCs across multiple AWS accounts.
On-prem data center via Direct Connect.
Remote branch offices via VPN.
Network routing is simplified, with centralized monitoring and policies.
🔹 AWS Global Accelerator
📖 What it is:
A global networking service that improves availability and performance of applications for worldwide users.
Uses the AWS global network (edge locations + backbone) to route traffic to the nearest healthy endpoint.
Unlike CloudFront (caches content), Global Accelerator is for accelerating applications (static or dynamic).
✅ Key Features
Anycast IPs: Provides 2 static IP addresses that act as a fixed entry point for your app.
Traffic Routing: Directs users to the nearest AWS region with healthy endpoints.
Health Checks: Continuously monitors application endpoints.
Failover: Automatically reroutes traffic to the next available endpoint if one fails.
Protocol Support: Works with TCP and UDP traffic (great for gaming, VoIP).
Endpoint Types: ALB, NLB, EC2, Elastic IPs.
Regional Isolation: Can route traffic to specific regions only if needed.
🛠 Use Cases
Gaming applications needing low latency.
Financial apps requiring consistent, reliable global access.
SaaS providers offering multi-region services.
Voice/Video apps (real-time communication).
Disaster recovery with automatic failover.
📌 Exam Tips
Global Accelerator vs CloudFront:
CloudFront → Optimizes content delivery (caching, CDN).
Global Accelerator → Optimizes application performance (routing, TCP/UDP).
Global Accelerator vs Route 53:
Route 53 → DNS-based routing (can take minutes to propagate).
Global Accelerator → Instant failover with static IPs.
Static IPs → Key exam keyword (unlike CloudFront which uses DNS names).
If exam says “global app acceleration, static IPs, TCP/UDP traffic” → Global Accelerator.
🌍 Real-World Example
A global online gaming company has users in the US, EU, and Asia.
They deploy game servers in 3 AWS regions.
Global Accelerator provides two static IPs that gamers connect to worldwide.
Traffic is routed to the nearest healthy region for minimal latency.
If the EU server goes down, players are automatically redirected to US or Asia with zero DNS changes.
🔹 AWS VPN
📖 What it is:
A managed service that provides secure connectivity between on-premises networks, remote clients, and AWS VPCs over the public internet using encrypted tunnels (IPsec).
Two main types:
Site-to-Site VPN → Connects on-prem data centers or branch offices to AWS VPCs.
Client VPN → Connects individual users (laptops, remote workers) to AWS.
✅ Key Features
Site-to-Site VPN
Uses an AWS VPN Gateway (on AWS side) and a Customer Gateway (CGW) (on-prem router/firewall).
Encrypted IPsec tunnel over the internet.
Can be used as backup to Direct Connect.
AWS Client VPN
Secure, managed VPN service for users.
Uses OpenVPN-based clients.
Integrates with Active Directory / IAM for authentication.
High Availability
Each Site-to-Site VPN has two tunnels (HA by default).
Can connect to multiple AWS regions.
Integration
Works with Transit Gateway (centralized hub for multiple VPCs).
Can run alongside Direct Connect for hybrid cloud.
🛠 Use Cases
Hybrid cloud → extend corporate network into AWS.
Remote work → employees connect securely to AWS apps.
Backup connectivity for Direct Connect.
Multi-branch office networking.
Developers securely accessing private VPC resources.
📌 Exam Tips
VPN vs Direct Connect:
VPN → Quick, cheap, encrypted, but variable latency.
Direct Connect → Dedicated, consistent, not encrypted by default.
VPN + Direct Connect: Best option → DX for primary, VPN for backup.
Transit Gateway VPN attachment: Supports scaling VPNs across many VPCs.
Two tunnels per VPN → Always mentioned in exam for redundancy.
Client VPN → If exam says “remote employees need secure access” → choose Client VPN.
🌍 Real-World Example
A university wants researchers to access AWS-hosted data securely:
The university connects its on-prem data center to AWS via Site-to-Site VPN.
Researchers working from home use Client VPN to log in securely.
The VPN is attached to a Transit Gateway, which connects multiple VPCs (Research, Analytics, and ML workloads).
🔹 AWS Elastic Load Balancing (ELB)
📖 What it is:
A fully managed load balancing service that automatically distributes incoming traffic across multiple EC2 instances, containers, IPs, or Lambda functions.
Improves availability, fault tolerance, and scalability of applications.
✅ Types of Load Balancers
Application Load Balancer (ALB)
Operates at Layer 7 (HTTP/HTTPS).
Supports path-based & host-based routing.
Can route to microservices & containers (ECS/EKS).
Supports WebSockets & HTTP/2.
Integrated with WAF for app-layer security.
Network Load Balancer (NLB)
Operates at Layer 4 (TCP/UDP).
Ultra-low latency, millions of requests/sec.
Best for gaming, IoT, VoIP, or high-performance apps.
Supports static IPs & Elastic IPs.
Gateway Load Balancer (GWLB)
Operates at Layer 3 (IP).
Used for security appliances (firewalls, intrusion detection).
Deploys 3rd party security VMs transparently.
Classic Load Balancer (CLB) (legacy)
Old generation, supports Layer 4 & 7 but limited features.
Replaced by ALB/NLB (only seen in exam for migration scenarios).
🛠 Use Cases
ALB → Web apps, microservices, serverless APIs.
NLB → Real-time gaming, financial apps needing high throughput & static IPs.
GWLB → Inserting firewalls/IDS into network traffic.
CLB → Legacy apps (exam may mention migrating away).
📌 Exam Tips
ALB = Layer 7, advanced routing (host/path, microservices, WAF).
NLB = Layer 4, static IP, ultra-fast performance.
GWLB = Layer 3, security appliances.
Sticky Sessions: Keep user bound to the same target (ALB/CLB support).
Cross-Zone Load Balancing: Distributes traffic evenly across all AZs.
Health Checks: Each ELB performs health checks before routing.
If exam says “HTTP app, routing to microservices” → ALB.
If exam says “millions of requests/sec, static IPs” → NLB.
If exam says “firewall appliances” → GWLB.
🌍 Real-World Example
A food delivery platform runs its backend in AWS:
ALB routes traffic to different microservices: /orders → Order service, /payments → Payment service.
NLB handles real-time rider tracking using TCP-based GPS updates.
GWLB inserts a 3rd-party firewall to scan all traffic before hitting the app.
This setup ensures scalability, security, and high performance.
🔹 AWS App Mesh
📖 What it is:
A service mesh that provides application-level networking for microservices running on AWS.
Standardizes service-to-service communication, making it secure, observable, and reliable.
Works with ECS, EKS, Fargate, and EC2-based services.
✅ Key Features
Service Discovery → Automatically routes traffic between microservices.
Traffic Routing → Fine-grained control (e.g., canary deployments, blue/green).
Observability → Built-in monitoring with CloudWatch, X-Ray, and Prometheus.
Security → Encrypted communication (TLS) between services.
Sidecar Pattern → Uses Envoy proxy as a sidecar container for each service.
Compatibility → Works with containers, serverless, and VMs.
🛠 Use Cases
Managing microservices running on ECS/EKS.
Canary releases / A/B testing (route % traffic to new version).
Enforcing zero-trust networking between services.
Observability for distributed apps.
Ensuring resiliency with retries, failover, and circuit breaking.
📌 Exam Tips
App Mesh vs ELB:
ELB → External traffic distribution.
App Mesh → Internal microservice-to-microservice traffic.
App Mesh vs Transit Gateway:
TGW → Network-level connectivity.
App Mesh → Application-level communication.
Uses Envoy proxy (sidecar) → important exam keyword.
If exam says “service-to-service communication, observability, TLS encryption” → App Mesh.
🌍 Real-World Example
A ride-sharing app has multiple microservices: User Service, Ride Service, Payment Service.
They run on EKS (Kubernetes).
App Mesh with Envoy ensures:
Traffic from User → Ride Service is routed securely with TLS.
Canary release: 10% traffic goes to new Ride Service v2, 90% to v1.
Metrics from all services flow to CloudWatch + X-Ray for tracing.
This improves resiliency, security, and visibility of the microservices architecture.
🔹 AWS Cloud Map
📖 What it is:
A service discovery tool for cloud resources.
Lets applications automatically discover other services/resources by name instead of hardcoding IP addresses.
Works with ECS, EKS, EC2, Lambda, and App Mesh.
✅ Key Features
Custom Namespaces → Define logical names (e.g., orders.myapp.local).
Service Registry → Register microservices, databases, queues, etc.
Automatic Updates → As services scale up/down (ECS/EKS), Cloud Map updates their locations.
Health Checks → Integrates with Route 53 health checks for service availability.
Integration → Works with App Mesh for service-to-service discovery.
Multi-Resource Support → Not just compute, can register databases, queues, S3 buckets, etc.
🛠 Use Cases
Microservices architectures → auto-discover new services.
ECS/EKS clusters → dynamic service discovery as containers scale.
Hybrid cloud service registry.
Avoid hardcoding IPs → use DNS-friendly service names.
Disaster recovery setups where resources frequently change.
📌 Exam Tips
Cloud Map vs Route 53:
Route 53 → Public DNS service.
Cloud Map → Private service discovery (inside AWS apps).
Often paired with ECS/EKS + App Mesh.
If exam mentions “service discovery, dynamic microservices, namespace registry” → Cloud Map.
Useful in scenarios where resources are ephemeral (e.g., containers scaling up/down).
🌍 Real-World Example
A food delivery microservices app runs on ECS Fargate:
Cloud Map namespace created as foodapp.local.
Services register automatically:
orders.foodapp.local → Order service.
payments.foodapp.local → Payment service.
As ECS scales up/down, Cloud Map keeps DNS updated.
The app communicates using these logical names → no IP management needed.
🔹 AWS IAM (Identity and Access Management)
📖 What it is:
A global service that securely controls who can access AWS resources and what actions they can perform.
Central to AWS security — every AWS account uses IAM.
✅ Key Features
Users → Individual accounts with credentials (username/password or access keys).
Groups → Collections of users with shared permissions.
Roles → Temporary credentials for AWS services, apps, or external users.
Policies → JSON documents defining permissions (Allow/Deny).
Root User → Full account access, best practice is to avoid using it.
Multi-Factor Authentication (MFA) → Strong authentication.
Federation & SSO → Integrates with corporate directories (AD, SAML, Cognito).
IAM Access Analyzer → Identifies resources shared publicly or cross-account.
🛠 Use Cases
Creating least-privilege access for developers/admins.
Assigning IAM roles to EC2 for accessing S3/DynamoDB.
Federating corporate users into AWS (SSO).
Enforcing MFA for sensitive accounts.
Securing cross-account resource sharing.
📌 Exam Tips
IAM is global → does not live in a region.
Principle of least privilege → golden rule.
IAM Role vs User:
Role → Temporary credentials, assumed by AWS services or apps.
User → Long-term credentials for humans.
Best Practices:
Enable MFA.
Don’t use root for daily operations.
Rotate credentials regularly.
Policies → evaluated by combining explicit allow/deny.
If exam mentions “temporary access, cross-account, service-to-service permissions” → IAM Role.
🌍 Real-World Example
A media company has developers who need to upload files to S3:
Instead of giving each developer permanent credentials, they log in with IAM Users in a Group (with least-privilege policy).
Their EC2 app uses an IAM Role with AmazonS3FullAccess → no hardcoded credentials.
MFA enforced for admins.
IAM Access Analyzer alerts if any S3 bucket becomes public.
🔹 Amazon Cognito
📖 What it is:
A fully managed identity service for authenticating users in web and mobile apps.
Provides sign-up, sign-in, and access control without needing a custom auth system.
Supports federated identity (Google, Facebook, Apple, SAML, enterprise AD).
✅ Key Features
User Pools → Managed user directory (for app sign-up & sign-in).
Identity Pools (Federated Identities) → Grant AWS credentials to users (via IAM roles).
Social & Enterprise Login → Supports Google, Facebook, Apple, Amazon, SAML, OpenID Connect.
MFA & Security → Built-in support for MFA, password policies, account recovery.
Token-based Authentication → Issues JWT (ID, access, refresh tokens).
Integration → Works with API Gateway, AppSync, Lambda, etc.
🛠 Use Cases
Adding sign-up/sign-in to mobile/web apps.
Allowing users to log in with Google/Facebook/Apple.
Securely granting AWS access (e.g., upload to S3 from client apps).
Replacing custom authentication systems with managed service.
Integrating enterprise SSO (Active Directory, SAML).
📌 Exam Tips
User Pool vs Identity Pool:
User Pool → Authentication (who the user is).
Identity Pool → Authorization (what they can access in AWS).
Federated identities → If exam says "users log in with Google/Facebook" → Cognito.
MFA support → Mentioned in exam as "secure user authentication".
Cognito + API Gateway → Very common serverless exam pattern.
If exam mentions “add user sign-up/login without managing infrastructure” → Cognito.
🌍 Real-World Example
A fitness tracking mobile app wants to allow users to:
Sign up with email/password OR log in via Google/Apple ID.
Once logged in, users can upload workout images/videos directly to S3.
Cognito User Pool manages authentication.
Cognito Identity Pool assigns IAM roles so users can securely upload to S3 without hardcoding credentials.
🔹 AWS Secrets Manager
📖 What it is:
A fully managed service for securely storing, retrieving, and rotating secrets (e.g., database credentials, API keys, tokens).
Provides fine-grained access control with IAM.
Eliminates hardcoding secrets in code.
✅ Key Features
Secure Storage → Encrypts secrets at rest using KMS.
Automatic Rotation → Can automatically rotate credentials (e.g., RDS, Redshift).
Programmatic Access → Retrieve secrets via AWS SDK, CLI, or API.
Audit & Monitoring → Integrated with CloudTrail (who accessed what, when).
Versioning → Manages multiple versions of a secret.
Cross-Region Secrets Replication → Store secrets in multiple regions for DR.
🛠 Use Cases
Store DB usernames/passwords securely.
Store 3rd party API keys (e.g., Stripe, Twilio).
Automate RDS credential rotation.
Securely share secrets across microservices.
Prevent developers from hardcoding secrets in apps.
📌 Exam Tips
Secrets Manager vs Systems Manager Parameter Store:
Secrets Manager → Advanced, auto-rotation, designed for secrets.
Parameter Store → General config storage (free tier, no auto-rotation).
Auto Rotation → If exam mentions “rotate RDS credentials automatically” → Secrets Manager.
KMS Integration → Secrets are always encrypted.
Auditability → CloudTrail logs every access.
Cross-account access supported using IAM policies.
🌍 Real-World Example
A banking application needs to store database credentials securely:
DB passwords are stored in Secrets Manager, encrypted with KMS.
A Lambda function retrieves the secret when connecting to RDS (no hardcoding).
Passwords are rotated every 30 days automatically without downtime.
Security team monitors CloudTrail logs to track secret access.
🔹 AWS KMS (Key Management Service)
📖 What it is:
A managed encryption service to create, manage, and control cryptographic keys.
Used for data encryption across AWS services (S3, EBS, RDS, Secrets Manager, etc.).
Provides FIPS 140-2 validated HSMs (Hardware Security Modules).
✅ Key Features
Customer Managed Keys (CMKs) → You create/manage keys.
AWS Managed Keys → Default keys used by services (e.g., aws/s3).
Automatic Key Rotation → Yearly rotation (optional).
Envelope Encryption → Encrypts data keys with a master key for efficiency.
Integration → Almost every AWS service (S3, EBS, RDS, DynamoDB, Lambda, CloudTrail).
Auditability → Integrated with CloudTrail for all key usage.
Multi-Region Keys → Same key usable in multiple regions.
🛠 Use Cases
Encrypting S3 bucket objects.
Encrypting RDS or EBS volumes.
Encrypting Secrets Manager & Parameter Store data.
Digital signing and verifying data.
Regulatory compliance (HIPAA, PCI DSS, etc.).
📌 Exam Tips
Default Encryption: Many AWS services integrate with KMS by default.
Envelope Encryption → Exam keyword (data key encrypted by master key).
KMS vs CloudHSM:
KMS → Managed service, AWS controls the HSMs.
CloudHSM → Dedicated HSMs, customer controls keys.
Automatic Key Rotation → Supported for customer-managed keys.
Key Policies → Control who can use/manage keys (IAM policies alone not enough).
If exam says “encrypt data at rest or in transit with managed keys” → KMS.
🌍 Real-World Example
A healthcare provider stores patient medical records in S3:
All S3 buckets are encrypted with KMS CMKs for compliance (HIPAA).
EC2 instances writing data to S3 use an IAM Role with permission to use that CMK.
CloudTrail logs every key usage (audit trail).
Keys are rotated automatically every year.
🔹 AWS Shield
📖 What it is:
A managed DDoS (Distributed Denial of Service) protection service.
Protects applications running on AWS against network and application layer attacks.
Always-on detection + automatic inline mitigation.
✅ Versions
AWS Shield Standard (Free)
Automatically enabled for all AWS customers.
Protects against common network & transport layer attacks (L3/L4).
Examples: SYN floods, UDP floods, reflection attacks.
AWS Shield Advanced (Paid)
Additional protection for large/complex workloads.
Includes application layer protection (L7).
24x7 access to the AWS DDoS Response Team (DRT).
Financial protection against scaling charges during attacks.
Detailed attack diagnostics + advanced reporting.
Integrates with WAF, CloudFront, Route 53, Global Accelerator, ALB/NLB.
🛠 Use Cases
Protecting websites & APIs against DDoS.
Securing gaming or financial apps against large-scale UDP/TCP floods.
Enterprises needing SLA-backed DDoS protection.
Protecting critical apps where downtime = huge revenue loss.
📌 Exam Tips
Shield Standard vs Advanced:
Standard = free, L3/L4 protection.
Advanced = paid, includes L7 + DRT + financial protection.
Shield + WAF → Combined exam scenario for app-layer security.
If exam mentions “DDoS protection by default” → Shield Standard.
If exam mentions “protection against large/complex attacks, cost protection, 24/7 support” → Shield Advanced.
Protected resources: CloudFront, Route 53, ALB, NLB, Global Accelerator.
🌍 Real-World Example
A large e-commerce site runs on AWS during Black Friday sales:
AWS Shield Standard blocks common floods automatically.
They subscribe to Shield Advanced for deeper protection + cost coverage.
When an attack occurs, AWS DDoS Response Team (DRT) helps mitigate it.
Combined with AWS WAF, they stop both volumetric (L3/L4) and application-level (L7) attacks.
🔹 AWS WAF
📖 What it is:
A Web Application Firewall that helps protect applications from common web exploits (e.g., SQL injection, XSS, bots).
Works at Layer 7 (HTTP/HTTPS).
Deployable on CloudFront, ALB, API Gateway, and AppSync.
✅ Key Features
Rules & Rule Groups: Define conditions for blocking/allowing traffic.
Managed Rules: Pre-configured by AWS or AWS Marketplace vendors (e.g., OWASP Top 10).
Custom Rules: Based on IP, country, headers, query strings, body, etc.
Rate-Based Rules: Protects against brute force/login attempts (blocks IPs after too many requests).
Bot Control: Detects & blocks automated traffic.
Logging & Monitoring: Integrated with CloudWatch & Kinesis Firehose.
Integration: Works with Shield, Firewall Manager for centralized security.
🛠 Use Cases
Blocking SQL injection / XSS attacks.
Preventing credential stuffing / brute-force login attempts.
Protecting APIs hosted on API Gateway.
Allowing/blocking traffic by geolocation.
Stopping bad bots or scrapers.
📌 Exam Tips
AWS WAF vs Shield:
Shield → DDoS protection (L3/L4, some L7 with Advanced).
WAF → Application-level filtering (L7).
WAF Deployment: Only on CloudFront, ALB, API Gateway, AppSync (important exam keyword).
Rate-Based Rule → If exam says "block IPs making >1000 requests in 5 mins" → WAF.
WAF + Shield → Complete protection against both DDoS & web exploits.
If exam mentions “filtering HTTP requests, blocking SQLi/XSS, bot protection” → WAF.
🌍 Real-World Example
A ticket booking website is under attack from bots trying to grab seats:
They deploy WAF with Bot Control on CloudFront.
Malicious bot traffic is blocked, while legitimate users still access tickets.
A rate-based rule prevents excessive login attempts from a single IP.
Combined with Shield Advanced, they are protected from both DDoS + web attacks.
🔹 Amazon GuardDuty
📖 What it is:
A threat detection service that continuously monitors AWS accounts, workloads, and data for malicious activity or unauthorized behavior.
Uses machine learning, anomaly detection, and threat intelligence.
No agents needed → works by analyzing AWS logs.
✅ Key Features
Data Sources Analyzed:
VPC Flow Logs (network traffic).
CloudTrail (API activity).
DNS logs.
Threat Detection: Identifies compromised IAM users, malware activity, unusual API calls, port scanning, crypto-mining, etc.
Continuous Monitoring: Always on, near real-time detection.
Severity Levels: Findings categorized as Low, Medium, High.
Integration: Works with Security Hub, EventBridge, Lambda (for automated responses).
Multi-Account Support: Centralized monitoring in organizations.
🛠 Use Cases
Detecting compromised IAM credentials.
Alerting on unusual API usage (e.g., root login from new location).
Identifying EC2 instances communicating with malicious IPs.
Detecting crypto-mining in EC2 workloads.
Monitoring DNS for suspicious domain queries.
📌 Exam Tips
GuardDuty vs Inspector:
GuardDuty → Detects threats (logs analysis, network, API activity).
Inspector → Assesses vulnerabilities (patching, CVEs, compliance).
GuardDuty vs Macie:
GuardDuty → Detects malicious activity.
Macie → Protects sensitive data (PII) in S3.
No agents required → Important keyword for exam.
Findings severity helps prioritize responses.
If exam says “detect unusual API activity, compromised accounts, or crypto-mining” → GuardDuty.
🌍 Real-World Example
A fintech startup hosts apps on AWS:
GuardDuty detects that one EC2 instance is sending traffic to a known malicious IP.
It raises a High severity finding.
An EventBridge rule triggers a Lambda function that isolates the EC2 instance by removing it from the ALB target group and restricting security group rules.
The security team investigates further using CloudTrail logs.
🔹 Amazon Inspector
📖 What it is:
An automated vulnerability management service.
Continuously scans AWS workloads for software vulnerabilities (CVEs), insecure configurations, and deviations from best practices.
Helps meet compliance and security standards.
✅ Key Features
Automated Scanning
Scans EC2 instances (OS & apps).
Scans ECR container images for known vulnerabilities.
Supports Lambda functions (checks for dependency vulnerabilities).
Continuous Assessment
No manual triggering required (auto-scans when new code/images are pushed).
Findings updated as resources change.
Findings
Uses CVSS (Common Vulnerability Scoring System) for severity scoring.
Integrates with Security Hub & EventBridge for central visibility.
No Agents Required (new Inspector)
Unlike old Inspector, now uses AWS services like SSM for data collection.
🛠 Use Cases
Detecting unpatched OS vulnerabilities on EC2.
Scanning Docker images in Amazon ECR before deployment.
Identifying insecure Lambda packages.
Enforcing compliance standards (PCI DSS, HIPAA, ISO).
Securing workloads in CI/CD pipelines.
📌 Exam Tips
Inspector vs GuardDuty:
Inspector → Vulnerability assessment (what’s vulnerable?).
GuardDuty → Threat detection (what’s being attacked/compromised?).
Inspector vs Macie:
Inspector → Scans workloads (EC2, ECR, Lambda).
Macie → Scans S3 for sensitive data.
If exam says “scan containers for CVEs before deployment” → Inspector.
If exam says “detect vulnerabilities in EC2 instances and Lambda packages” → Inspector.
Findings are prioritized by CVSS score.
🌍 Real-World Example
A healthcare SaaS provider builds apps with microservices running in ECS/EKS:
Amazon Inspector automatically scans all ECR container images before deployment.
It detects a critical CVE in an OpenSSL package inside a container.
The CI/CD pipeline blocks deployment until developers update the package.
Compliance auditors get visibility through AWS Security Hub integration.
🔹 Amazon Macie
📖 What it is:
A fully managed data security and privacy service.
Uses machine learning & pattern matching to automatically discover, classify, and protect sensitive data stored in Amazon S3.
Helps meet compliance requirements (GDPR, HIPAA, PCI DSS).
✅ Key Features
Automatic Data Discovery
Continuously monitors S3 buckets.
Identifies PII (Personally Identifiable Information) like names, addresses, SSNs, credit card numbers.
Detects financial, healthcare, and API credentials.
Data Classification
Assigns risk categories to objects.
Supports managed identifiers (built-in) and custom regex patterns.
Data Protection Monitoring
Detects unencrypted or publicly accessible sensitive data.
Integrates with EventBridge for alerts and automation.
Scalable → Works across all S3 buckets in an account.
🛠 Use Cases
Identifying PII in S3 for GDPR/HIPAA compliance.
Monitoring S3 buckets for publicly exposed sensitive data.
Protecting against insider threats or misconfigured access.
Automating compliance audits with Security Hub integration.
📌 Exam Tips
Macie vs GuardDuty:
Macie → Finds sensitive data in S3.
GuardDuty → Detects suspicious behavior / threats.
Macie vs Inspector:
Macie → Protects data at rest (S3).
Inspector → Protects infrastructure (EC2, ECR, Lambda).
Macie vs KMS:
KMS → Encrypts data.
Macie → Detects/classifies data.
If exam says “discover PII in S3 for compliance” → Macie.
If exam mentions “S3 bucket with sensitive data exposed publicly” → Macie.
🌍 Real-World Example
A financial services company stores millions of transaction logs in S3:
Macie scans all S3 buckets and detects that some logs contain credit card numbers.
It also flags that one bucket with PII was accidentally set to public access.
The security team is alerted via EventBridge + SNS and applies a Bucket Policy + KMS encryption to secure the data.
🔹 AWS Artifact
📖 What it is:
A self-service portal that provides on-demand access to AWS compliance reports and agreements.
Think of it as the “compliance & audit library” for AWS.
Helps organizations meet regulatory requirements.
✅ Key Features
Artifact Reports
Download compliance reports like SOC, PCI DSS, ISO, HIPAA, FedRAMP.
Useful for auditors and compliance teams.
Artifact Agreements
Allows customers to review, accept, and manage legal agreements (e.g., HIPAA Business Associate Addendum).
Track agreement status across multiple AWS accounts.
Self-Service & Free
Available at no cost.
Accessible via AWS console.
Centralized Compliance
Single place for compliance documents, no need to open support tickets.
🛠 Use Cases
Organizations undergoing compliance audits (SOC 2, ISO 27001, PCI DSS).
Healthcare companies needing HIPAA documentation.
Financial institutions needing FedRAMP or PCI DSS compliance.
Legal teams reviewing regulatory agreements with AWS.
📌 Exam Tips
Artifact provides documents, not enforcement (very common exam trap).
Free service → anyone with an AWS account can access.
Reports vs Agreements:
Reports → Compliance certifications from auditors.
Agreements → Legal contracts between AWS & customer.
If exam mentions “where can you download SOC/PCI compliance reports?” → Artifact.
If exam mentions “accept HIPAA agreement with AWS” → Artifact.
🌍 Real-World Example
A health-tech startup wants to prove HIPAA compliance to investors:
They log into AWS Artifact, download the HIPAA and SOC 2 reports.
They also accept the HIPAA Business Associate Agreement (BAA) through Artifact.
The compliance team uses these documents in external audits.
🔹 AWS Security Hub
📖 What it is:
A centralized security service that aggregates, organizes, and prioritizes security findings from multiple AWS services and partner tools.
Provides a single dashboard for compliance and security posture.
✅ Key Features
Data Aggregation → Collects findings from:
GuardDuty (threat detection)
Inspector (vulnerabilities)
Macie (sensitive data discovery)
Firewall Manager, IAM Access Analyzer, and 3rd party tools (Splunk, Palo Alto, etc.)
Security Standards & Compliance
CIS AWS Foundations Benchmark
PCI DSS
AWS Foundational Security Best Practices
Automated Workflows
Findings sent to Amazon EventBridge → trigger remediation with Lambda, Systems Manager, or SNS.
Cross-Account & Multi-Region Support
Consolidates findings across large AWS organizations.
Prioritization
Normalizes all findings into a common format (ASFF: AWS Security Finding Format).
🛠 Use Cases
Central place to view all security issues across AWS.
Automating incident response (e.g., quarantine compromised EC2 via Lambda).
Continuous compliance monitoring against CIS/PCI.
Enterprise-wide security visibility across multiple AWS accounts.
📌 Exam Tips
Security Hub vs GuardDuty:
GuardDuty = Detects threats.
Security Hub = Aggregates + prioritizes threats from multiple services.
Security Hub vs CloudTrail/CloudWatch:
CloudTrail = Logs activity.
CloudWatch = Monitors metrics/logs.
Security Hub = Centralizes security findings.
If exam says “single pane of glass for security findings” → Security Hub.
If exam says “continuous compliance against standards (CIS, PCI)” → Security Hub.
🌍 Real-World Example
A global bank runs workloads across 10 AWS accounts:
GuardDuty detects suspicious API calls, Inspector finds EC2 vulnerabilities, and Macie flags exposed PII in S3.
All findings are sent to Security Hub, which aggregates them in a single dashboard.
Using EventBridge + Lambda, the bank automatically quarantines compromised EC2 instances.
The compliance team monitors PCI DSS compliance via Security Hub.
🔹 Amazon Detective
📖 What it is:
A forensic investigation service that helps analyze and visualize security findings.
Uses machine learning, graph databases, and log data to make it easier to investigate the root cause of security issues.
Ingests data automatically from GuardDuty, Security Hub, CloudTrail, and VPC Flow Logs.
✅ Key Features
Data Aggregation & Correlation
Automatically collects logs from multiple AWS sources.
Builds a graph model of entities (users, IPs, EC2, resources) and their interactions.
Security Investigations
Helps answer:
“Was this IAM user compromised?”
“Is this EC2 instance part of a wider attack?”
“What other resources communicated with this IP?”
Visualization
Interactive graphs showing relationships between resources, activities, and anomalies.
No Manual Data Management
Automatically scales log ingestion and retention.
🛠 Use Cases
Investigating GuardDuty findings (e.g., suspicious API calls).
Tracing compromised IAM credentials across accounts.
Understanding lateral movement of an attacker inside AWS.
Performing forensic analysis after a security incident.
Supporting compliance/audit teams with detailed security context.
📌 Exam Tips
Detective vs GuardDuty:
GuardDuty → Detects threats.
Detective → Investigates root cause.
Detective vs Security Hub:
Security Hub → Aggregates & prioritizes findings.
Detective → Helps dig deeper into findings.
Detective automatically ingests data → No need to manage logs.
If exam mentions “graph database for investigation” or “investigate suspicious activity” → Detective.
🌍 Real-World Example
A fintech company receives a GuardDuty alert that an IAM user made API calls from a foreign country:
The security team opens the finding in Amazon Detective.
Detective shows the IAM user’s activity timeline, including:
Login attempts from multiple IPs.
EC2 instances launched in unusual regions.
S3 buckets accessed outside normal patterns.
Based on this, the team confirms a compromised account and revokes the credentials.
🔹 AWS Firewall Manager
📖 What it is:
A security management service that allows you to centrally configure and manage firewall rules across multiple AWS accounts and resources.
Works with AWS WAF, Shield Advanced, Security Groups, and VPCs.
Best suited for large organizations using AWS Organizations.
✅ Key Features
Centralized Management
Define firewall/security policies once and apply them across accounts/resources.
Ensures compliance across an enterprise.
Integration with Other Services
WAF → Manage web application firewall rules.
Shield Advanced → Apply DDoS protection policies.
VPC Security Groups → Enforce consistent SG rules.
Network Firewall → Centralize traffic filtering across VPCs.
Compliance Enforcement
Detects non-compliant resources and auto-corrects them.
Continuous monitoring of new AWS accounts/resources.
Multi-Account Support
Requires AWS Organizations for cross-account policy enforcement.
🛠 Use Cases
Enforcing company-wide WAF rules (e.g., block SQL injection) across all web apps.
Automatically applying Shield Advanced protection to new CloudFront distributions.
Ensuring consistent security group rules across all VPCs.
Central firewall management for regulated industries (finance, healthcare).
📌 Exam Tips
Firewall Manager vs WAF:
WAF → Protects against web exploits (per app).
Firewall Manager → Manages WAF rules (and more) across accounts.
Firewall Manager vs Security Hub:
Security Hub → Aggregates findings.
Firewall Manager → Enforces firewall/security policies.
Must use AWS Organizations → Exam keyword.
If exam says “centralized firewall/security policy enforcement across multiple accounts” → Firewall Manager.
🌍 Real-World Example
A global retail company has dozens of AWS accounts under AWS Organizations:
Security team sets a Firewall Manager policy to:
Apply AWS WAF rules to all CloudFront distributions.
Enforce Shield Advanced for DDoS protection.
Standardize VPC Security Group rules (e.g., only port 443 open to the internet).
As new accounts are created, Firewall Manager automatically applies these policies, ensuring compliance.
🔹 AWS Control Tower
📖 What it is:
A governance and account management service that helps set up and manage a secure, multi-account AWS environment based on AWS best practices.
Provides a “landing zone” with guardrails, policies, and automation.
Built on top of AWS Organizations, IAM, CloudTrail, Config, Service Catalog.
✅ Key Features
Landing Zone Setup
Pre-configured multi-account AWS environment.
Includes Audit account (for logging & compliance) and Log archive account.
Guardrails
Predefined governance policies.
Preventive Guardrails → Block non-compliant actions (e.g., disallow public S3 buckets).
Detective Guardrails → Detect/report compliance issues.
Account Factory
Automates account creation using Service Catalog.
New accounts automatically inherit governance policies.
Centralized Governance
Manage users, accounts, security, and compliance from a single dashboard.
🛠 Use Cases
Setting up a secure multi-account architecture for enterprises.
Enforcing organization-wide compliance policies.
Simplifying account provisioning for new teams.
Ensuring audit readiness (SOC, HIPAA, PCI DSS).
📌 Exam Tips
Control Tower vs Organizations:
Organizations → Raw tool to manage accounts.
Control Tower → Easy “governed landing zone” setup on top of Organizations.
Guardrails = key keyword in exams.
Account Factory → Automates account creation with policies.
If exam says “set up a secure multi-account environment quickly with best practices” → Control Tower.
If exam says “enforce preventive & detective controls (guardrails)” → Control Tower.
🌍 Real-World Example
A multinational bank wants to migrate multiple business units to AWS:
They use AWS Control Tower to quickly create a multi-account landing zone.
Guardrails prevent S3 buckets from being made public and ensure CloudTrail is always enabled.
The Account Factory automatically provisions new AWS accounts for different teams with baseline security.
Compliance teams use the centralized dashboard to ensure all accounts meet regulatory standards.
✅ That’s AWS Control Tower — your governance and compliance “autopilot” for multi-account AWS environments.
🔹 Amazon CloudWatch
📖 What it is:
A monitoring and observability service for AWS resources, applications, and infrastructure.
Collects metrics, logs, events, and traces → provides insights into system performance and health.
Essential for operations, troubleshooting, and automation.
✅ Key Features
Metrics
CPU, memory, network, disk (for EC2, RDS, Lambda, etc.).
Custom metrics supported (e.g., app-specific counters).
Alarms
Trigger notifications (SNS, email, SMS).
Take automated actions (e.g., auto-scale EC2, stop instances).
Logs
Collect application/system logs (from EC2, Lambda, API Gateway, etc.).
Supports log retention, filtering, and queries via CloudWatch Logs Insights.
Events (EventBridge)
React to AWS service events (e.g., EC2 state changes, S3 object uploads).
Dashboards
Custom visualizations for metrics and alarms.
CloudWatch Synthetics
Canaries → Monitor endpoint availability (simulate user interactions).
CloudWatch Contributor Insights
Analyze top contributors to a problem (e.g., top IPs causing throttling).
🛠 Use Cases
Monitor EC2 performance (CPU, memory, network).
Set alarms to auto-scale EC2 instances in Auto Scaling Groups.
Debug serverless applications with Lambda + CloudWatch Logs.
Detect unusual activity (e.g., sudden spike in failed login attempts).
Build custom dashboards for ops teams.
Monitor application endpoints with Synthetics Canaries.
📌 Exam Tips
CloudWatch vs CloudTrail vs Config:
CloudWatch → Metrics, logs, alarms (performance monitoring).
CloudTrail → API activity logging (who did what).
Config → Resource configuration compliance (how resources are configured).
CloudWatch Alarms + Auto Scaling → Very common exam scenario.
CloudWatch Logs vs S3 Logs: CloudWatch is for real-time monitoring, S3 logs are for storage/analysis.
If exam says “set alarms when CPU > 80% for EC2” → CloudWatch.
If exam says “monitor application performance, metrics, and logs” → CloudWatch.
🌍 Real-World Example
A video streaming company hosts apps on EC2 + Lambda:
CloudWatch Metrics monitor CPU and network usage of EC2 instances.
A CloudWatch Alarm triggers Auto Scaling to add more EC2s if CPU > 70%.
CloudWatch Logs collect error logs from Lambda functions.
CloudWatch Synthetics continuously checks video streaming endpoints to ensure uptime.
Ops team uses CloudWatch Dashboards to track system health in real time.
🔹 AWS CloudTrail
📖 What it is:
A logging and auditing service that records API calls and account activity across AWS.
Provides visibility into who did what, when, and from where.
Critical for security auditing, compliance, and troubleshooting.
✅ Key Features
Event Logging
Captures all API calls (via Console, CLI, SDKs, and AWS services).
Includes who made the request, which service, what actions, and source IP.
Types of Events
Management Events → Control plane operations (e.g., create EC2, modify IAM).
Data Events → Access to data resources (e.g., S3 GetObject, Lambda Invoke).
Insights Events → Detect unusual activity (e.g., spikes in write calls).
Integration
Store logs in S3 for long-term retention.
Send to CloudWatch Logs for monitoring.
Analyze with Athena for queries.
Multi-Region & Multi-Account
Trails can be created per region or across all regions.
Supports AWS Organizations for centralized logging.
🛠 Use Cases
Security audits → Track all activity in the account.
Forensics → Investigate unauthorized access or resource changes.
Compliance → Ensure regulatory audit requirements (PCI DSS, HIPAA, etc.).
Troubleshooting → Debug unexpected behavior by reviewing API calls.
Governance → Detect usage of sensitive APIs (e.g., DeleteBucket).
📌 Exam Tips
CloudTrail vs CloudWatch vs Config:
CloudTrail → Records API activity.
CloudWatch → Monitors metrics/logs.
Config → Tracks resource configurations & compliance.
Default Behavior → CloudTrail is enabled by default (but stores only the past 90 days of activity in Event History).
Persistent Storage → For longer retention, must configure an S3 bucket.
Data Events are disabled by default (must enable explicitly for S3, Lambda).
If exam says “track API calls for auditing” → CloudTrail.
If exam says “who deleted an EC2 instance?” → CloudTrail.
🌍 Real-World Example
A healthcare company needs to comply with HIPAA:
They enable CloudTrail across all regions and store logs in an encrypted S3 bucket.
An IAM policy restricts access to the logs for compliance officers only.
During an incident, they use Athena queries to find which IAM user accessed patient records.
Security team uses CloudTrail Insights to detect unusual API activity spikes.
🔹 AWS Config
📖 What it is:
A configuration tracking and compliance service.
Continuously monitors and records AWS resource configurations.
Evaluates resources against custom or managed compliance rules.
✅ Key Features
Configuration History
Records detailed config changes (who, when, what changed).
Example: An S3 bucket made public → logged in Config.
Compliance Rules
Managed Rules (AWS-provided) → e.g., S3 must have encryption, IAM users must have MFA.
Custom Rules (via Lambda) → Define your own compliance logic.
Config Timeline
Historical view of resource changes (audit trail).
Integration
Works with CloudTrail (who made API calls).
Triggers SNS/EventBridge alerts when non-compliance detected.
Multi-Account Support
Aggregates compliance across AWS Organizations.
🛠 Use Cases
Ensure compliance with regulatory standards (PCI, HIPAA, GDPR).
Track all configuration changes (who modified an IAM policy?).
Detect security misconfigurations (unsecured SGs, public S3 buckets).
Audit and troubleshoot production incidents.
Automate remediation via Lambda (self-healing compliance).
📌 Exam Tips
Config vs CloudTrail vs CloudWatch:
Config → Records how resources are configured + compliance.
CloudTrail → Logs who made API calls.
CloudWatch → Monitors performance metrics/logs.
Config Rules are central → If exam says “check if S3 buckets are encrypted” → AWS Config.
Can trigger automated remediation → exam keyword.
Stores configuration history → unlike CloudWatch/CloudTrail.
🌍 Real-World Example
A financial institution must comply with PCI DSS:
AWS Config Rules ensure all S3 buckets have encryption enabled and no security groups allow 0.0.0.0/0 on port 22.
If a violation is detected, Config triggers a Lambda function to automatically remediate (e.g., close SG).
Compliance dashboard gives auditors proof of continuous monitoring.
🔹 AWS Systems Manager (SSM)
📖 What it is:
A management and automation service for AWS and on-premises infrastructure.
Provides a unified interface to view, control, and automate your systems.
Often called the “Swiss army knife” for AWS operations.
✅ Key Features
Session Manager
Securely connect to EC2 instances without SSH or bastion hosts.
Logs all commands to CloudWatch or S3.
Run Command
Execute commands/scripts across multiple EC2/On-Prem servers.
Example: install updates, restart services.
Patch Manager
Automates OS patching across fleets of servers.
Parameter Store
Secure storage for configuration values, environment variables, secrets.
Supports encryption with KMS.
Automation Documents (SSM Documents)
Define workflows for tasks (e.g., take EBS snapshots, rotate IAM keys).
Inventory
Collect metadata about installed software and system details.
Ops Center
Central dashboard for operational issues.
Integration
Works with EC2, EKS, RDS, and hybrid environments.
Integrates with CloudWatch Alarms and EventBridge for automation.
🛠 Use Cases
Accessing EC2 securely without SSH keys.
Automating patch management across 1,000+ servers.
Centralized secrets/config management with Parameter Store.
Incident remediation (restart EC2 on failure, snapshot EBS).
Running compliance checks across hybrid infra.
📌 Exam Tips
Session Manager = SSH-less EC2 access → exam favorite.
Parameter Store = Secure config store (cheaper alternative to Secrets Manager).
Patch Manager = Automates updates.
Automation Documents = Infrastructure automation workflows.
SSM Agent must be installed on EC2/servers for management.
If exam says “secure access to EC2 without opening port 22” → Systems Manager Session Manager.
If exam says “store encrypted app configs” → Parameter Store.
🌍 Real-World Example
A software company runs 500 EC2 instances across dev, test, and prod:
They use SSM Patch Manager to apply monthly security updates.
Parameter Store stores database connection strings securely (encrypted with KMS).
Developers connect to EC2 using Session Manager (no SSH keys, no port 22).
If CloudWatch detects high memory usage, SSM Automation triggers a script to restart the EC2 app service.
🔹 AWS Trusted Advisor
📖 What it is:
An online tool that provides real-time guidance to help optimize your AWS environment.
Checks your account against AWS best practices in 5 categories: Cost, Performance, Security, Fault Tolerance, and Service Limits.
✅ Key Features
Cost Optimization
Find unused or underutilized resources (e.g., idle EC2s, low EBS usage).
Performance
Recommendations for improving performance (e.g., use CloudFront for latency).
Security
Identifies security gaps (e.g., IAM users without MFA, public S3 buckets).
Fault Tolerance
Helps with high availability (e.g., enable Multi-AZ for RDS, backup policies).
Service Limits
Alerts when nearing AWS resource limits (e.g., EC2 instance quotas).
🛠 Use Cases
Reducing cloud costs by removing idle instances.
Improving security posture (e.g., enforcing MFA).
Increasing availability (e.g., recommending Multi-AZ).
Preventing outages by monitoring service quotas.
Ensuring compliance with AWS best practices.
📌 Exam Tips
Trusted Advisor vs Config vs Inspector:
Trusted Advisor → General best-practice checks (cost, limits, security).
Config → Compliance against rules (resource configurations).
Inspector → Vulnerability scanning (EC2, ECR, Lambda).
Basic Support Plan → Limited Trusted Advisor checks (Service Limits & Security only).
Business/Enterprise Support Plans → Full set of Trusted Advisor checks.
If exam says “optimize cost/security across AWS accounts” → Trusted Advisor.
If exam says “view account-level recommendations” → Trusted Advisor.
🌍 Real-World Example
A startup on AWS Free Tier is growing fast:
They check Trusted Advisor and find:
3 unused EC2 instances running (cost optimization).
IAM users without MFA (security issue).
RDS without Multi-AZ (fault tolerance).
Close to hitting an EC2 instance limit (service quota).
Fixing these issues saves money, improves security, and ensures compliance.
✅ That’s AWS Trusted Advisor — your built-in AWS consultant for cost, performance, and security.
Next in Management & Governance is AWS Service Catalog (managing pre-approved resources for teams).
 Shall I continue with Service Catalog?
